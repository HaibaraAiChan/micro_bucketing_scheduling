main start at this time 1698527445.636333
-----------------------------------------before load data 
 Nvidia-smi: 0.166015625 GB
    Memory Allocated: 0.0  GigaBytes
Max Memory Allocated: 0.0  GigaBytes

  NumNodes: 2708
  NumEdges: 10556
  NumFeats: 1433
  NumClasses: 7
  NumTrainingSamples: 140
  NumValidationSamples: 500
  NumTestSamples: 1000
Done loading data from cached files.
success----------------------------------------
140
500
2068
# Nodes: 2708
# Edges: 10556
# Train: 140
# Val: 500
# Test: 2068
# Classes: 7

----------------------------------------start of run function 
 Nvidia-smi: 0.166015625 GB
    Memory Allocated: 0.0  GigaBytes
Max Memory Allocated: 0.0  GigaBytes

generate_dataloader_bucket_block=======
get_in_degree_bucketing src global nid  tensor([  48,  128,  122,   89,  129,   69,   97,  131,   99,  101,   74,  118,
           5,   12,   51,   77,   85,    7,   34,  107,   78,  138,   17,    3,
          30,   11,   45,   98,   10,   68,   66,   25,  102,   80,  137,  106,
          62,   82,  121,  116,   41,  123,    2,  114,   13,    0,   38,  132,
          26,   50,  111,  103,   59,   93,    1,  130,   84,  119,    4,  104,
          61,   44,   64,  135,   90,   20,   27,   96,   37,   72,  120,   14,
          58,   23,  109,   53,    9,  110,   21,   87,   71,   29,   52,   39,
          43,   88,    8,  108,  117,  126,   65,  105,   67,  125,   24,  133,
          40,  112,   49,   15,   47,  124,   42,    6,  115,  139,   16,   32,
         113,   31,   22,  134,   83,   94,   73,   76,   63,   36,   92,   18,
          95,   46,  136,   54,   57,   60,   70,   86,   19,   55,  127,   91,
          33,  100,   79,   56,   28,   81,   75,   35,  598,  714, 1031, 1662,
        1666, 2041, 2205, 2206, 2471,  233,  370,  392, 2270, 2454, 2455,  258,
         884, 1087, 1094, 1157, 1401, 1530, 1585, 1653, 2463,  441,  701,  604,
        1013, 1351, 1914, 1920, 1926, 2189,  661, 1353,  834, 2169, 2604,  281,
        1358, 1589,  544,  586, 1042, 1118, 1416, 1517, 2052, 2155, 2419,  255,
         388,  446,  454,  554,  581,  842, 1029, 1343, 1507, 1538, 1616, 1690,
        1851, 2010, 2030, 2112, 2165, 2166, 1629, 1659, 2546, 1001, 1318, 2661,
        2662,  457,  710, 1392, 2213, 2214, 2215,  659, 1803, 1065, 2487, 2488,
         208,  541,  971, 1113, 1650, 1219, 1329, 1418,  236,  306, 1776,  927,
        1315, 1316, 2140, 2544,  697,  738, 2162, 2343, 1655, 1839,  733, 1986,
        2303, 2667, 2668, 1521,  476, 2545,  391, 2631, 1301, 1344, 2011, 2317,
        1251, 1448, 1561, 1623, 1871, 1878, 2256,  257, 1117, 2049, 2144, 2329,
        2504, 2461,  485, 1138, 1634,  589,  802,  980, 1158, 1910, 2251, 2252,
        1076, 1501,  175,  596,  644,  332, 1454,  610, 2288, 2506, 1701, 1810,
         633, 1862, 2582,  429,  862,  863, 1160,  379,  479,  904, 1022, 1959,
        1441,  758, 1169, 1762, 2492, 2643,  484,  608, 1775, 1790,  580,  609,
         615, 1067, 1287, 1627, 1725, 2651,  550,  950, 1495, 2151,  652,  654,
        1982, 2017,  284, 2223, 2224, 2226,  646, 1537, 1549, 1901, 1016, 1256,
        1761, 2175, 2176,  401,  864, 2210, 1080, 1309, 2312, 1582, 2624, 2701,
        1209, 1737, 2616, 2095,  155,  156,  817, 1072, 2269, 2374, 2375,  606,
        2360, 2578, 2217, 1190, 2427, 1103,  483,  514,  816, 1842, 2405,  158,
        2034, 2075, 2077, 1715, 2159,  318, 1787,  153, 1789, 1337, 1661,  176,
        2094,  426, 1346,  459, 1772, 1779, 1805, 2093,  289, 1769, 1045, 1739,
         723, 2614,  567, 1161, 1262, 1599, 2279, 1043, 2310, 2164,  206, 2691,
         963, 2645, 1139, 1467, 2053, 2172, 2182, 1349, 1522, 1532, 1965, 2357,
         152, 2399, 2400,  841, 1394,  696, 1908, 1741,  162, 1882,  415, 2012,
        1527,  743,  851, 2178, 1713,  815, 2013, 1174, 1288, 1847,  269, 1996,
        1647, 2157, 2209,  259, 2537, 1551, 2045, 2079,  239,  543,  619,  771,
        1156, 1293, 1628, 2021, 2418, 1721, 2476,  282,  540, 2628,  458, 2363,
         201, 1636, 2139, 2141,  399,  452, 1670, 1777, 1784, 2082,  507,  866,
        1364,  487, 2080, 1090, 1093, 1271, 2367,  163, 1579, 1367, 1622, 2478,
        1372,  373, 1602,  973,  660,  910, 1780,  970, 1632, 2444, 2642,  279,
         518, 1850, 1973,  747, 1884, 1594, 1234, 1702, 1703, 2238,  406, 1520,
        2581,  195,  675,  934, 1649, 1966, 2263, 2355, 2490,  449,  558,  797,
         876, 1035, 1136, 1189, 1214, 1723, 1745, 1751, 2018, 1322, 1146, 1505,
        1552, 1640, 1781, 2106, 2107,  898, 1836, 1560, 1786, 2145,  334,  456,
         693,  734,  736,  861, 1303, 1535, 1580, 1838, 2054, 2074, 2181, 2183,
        2197, 2199, 2200, 2201, 1604, 2366,  831,  767, 2184, 1336, 2295, 1939,
         210,  323,  651,  787, 1079, 1983, 2020,  330, 1046, 2001, 2122, 2123,
        2380,  286,  588,  698,  911, 1051, 2040, 2119, 2120, 2121, 2056,  603,
        2097,  412,  447, 1849, 1687,  347,  423,  527, 2180,  583, 2222, 2225,
         895, 1296, 1913])
get_in_degree_bucketing dst global nid  tensor([ 48, 128, 122,  89, 129,  69,  97, 131,  99, 101,  74, 118,   5,  12,
         51,  77,  85,   7,  34, 107,  78, 138,  17,   3,  30,  11,  45,  98,
         10,  68,  66,  25, 102,  80, 137, 106,  62,  82, 121, 116,  41, 123,
          2, 114,  13,   0,  38, 132,  26,  50, 111, 103,  59,  93,   1, 130,
         84, 119,   4, 104,  61,  44,  64, 135,  90,  20,  27,  96,  37,  72,
        120,  14,  58,  23, 109,  53,   9, 110,  21,  87,  71,  29,  52,  39,
         43,  88,   8, 108, 117, 126,  65, 105,  67, 125,  24, 133,  40, 112,
         49,  15,  47, 124,  42,   6, 115, 139,  16,  32, 113,  31,  22, 134,
         83,  94,  73,  76,  63,  36,  92,  18,  95,  46, 136,  54,  57,  60,
         70,  86,  19,  55, 127,  91,  33, 100,  79,  56,  28,  81,  75,  35])
get_in_degree_bucketing corresponding in degs tensor([ 9,  4,  4, 10,  2,  7,  2,  2,  6,  3,  9, 19,  3,  4,  6,  2,  3,  1,
         1,  4,  3,  3,  5,  1,  6,  2,  6,  1,  2,  3,  1,  4,  8,  3,  4,  1,
         1,  2,  7,  2,  4,  4,  5,  3,  2,  3,  4,  5,  5,  1,  6,  6, 10,  4,
         3,  3,  5,  6,  5,  4,  5,  3,  3,  3,  4,  5,  4,  1,  3,  2,  5,  5,
         1,  1, 25,  3,  2,  5,  2,  3,  3,  2,  5,  7,  6, 25,  3,  3,  2,  6,
        10,  4,  3,  2,  7,  9,  3,  4,  2,  4,  2,  5,  2,  4,  1,  8,  4,  4,
         3,  1,  5,  1,  2, 11, 12,  3,  1,  8,  2,  5, 21,  2,  1,  2,  1,  3,
         2,  4,  1, 12,  1,  6,  9,  2,  2,  4,  1,  4,  6,  3])
len(bkt)  20
local bkt nids  tensor([ 17,  18,  23,  27,  30,  35,  36,  49,  67,  72,  73, 104, 109, 111,
        116, 122, 124, 128, 130, 136])
len(bkt)  25
local bkt nids  tensor([  4,   6,   7,  15,  25,  28,  37,  39,  44,  69,  76,  78,  81,  88,
         93,  98, 100, 102, 112, 118, 121, 123, 126, 133, 134])
len(bkt)  26
local bkt nids  tensor([  9,  12,  16,  20,  21,  29,  33,  43,  45,  54,  55,  61,  62,  63,
         68,  75,  79,  80,  86,  87,  92,  96, 108, 115, 125, 139])
len(bkt)  22
local bkt nids  tensor([  1,   2,  13,  19,  31,  34,  40,  41,  46,  53,  59,  64,  66,  91,
         97,  99, 103, 106, 107, 127, 135, 137])
len(bkt)  15
local bkt nids  tensor([ 22,  42,  47,  48,  56,  58,  60,  65,  70,  71,  77,  82, 101, 110,
        119])
len(bkt)  11
local bkt nids  tensor([  8,  14,  24,  26,  50,  51,  57,  84,  89, 131, 138])
len(bkt)  4
local bkt nids  tensor([ 5, 38, 83, 94])
len(bkt)  3
local bkt nids  tensor([ 32, 105, 117])
len(bkt)  4
local bkt nids  tensor([  0,  10,  95, 132])
len(bkt)  3
local bkt nids  tensor([ 3, 52, 90])
len(bkt)  1
local bkt nids  tensor([113])
len(bkt)  2
local bkt nids  tensor([114, 129])
len(bkt)  1
local bkt nids  tensor([11])
len(bkt)  1
local bkt nids  tensor([120])
len(bkt)  2
local bkt nids  tensor([74, 85])
total indegree bucketing result ,  140
bucket partitioner: bkt_dst_nodes_list_local  [tensor([ 17,  18,  23,  27,  30,  35,  36,  49,  67,  72,  73, 104, 109, 111,
        116, 122, 124, 128, 130, 136]), tensor([  4,   6,   7,  15,  25,  28,  37,  39,  44,  69,  76,  78,  81,  88,
         93,  98, 100, 102, 112, 118, 121, 123, 126, 133, 134]), tensor([  9,  12,  16,  20,  21,  29,  33,  43,  45,  54,  55,  61,  62,  63,
         68,  75,  79,  80,  86,  87,  92,  96, 108, 115, 125, 139]), tensor([  1,   2,  13,  19,  31,  34,  40,  41,  46,  53,  59,  64,  66,  91,
         97,  99, 103, 106, 107, 127, 135, 137]), tensor([ 22,  42,  47,  48,  56,  58,  60,  65,  70,  71,  77,  82, 101, 110,
        119]), tensor([  8,  14,  24,  26,  50,  51,  57,  84,  89, 131, 138]), tensor([ 5, 38, 83, 94]), tensor([ 32, 105, 117]), tensor([  0,  10,  95, 132]), tensor([ 3, 52, 90]), tensor([113]), tensor([114, 129]), tensor([11]), tensor([120]), tensor([74, 85])]
---||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||--
memory_constraint:  0.095
sum(estimated_mem)  0.36848267912864685
len(estimated_mem)  15
grouping float:  the grouping_fanout_cora called successfully
capacity  95
 enter split_cora function
[9, 29, 39, 54, 49, 39, 17, 14, 22, 18, 5, 14, 10, 14, 28]
indexed_dict  {0: 9, 1: 29, 2: 39, 3: 54, 4: 49, 5: 39, 6: 17, 7: 14, 8: 22, 9: 18, 10: 5, 11: 14, 12: 10, 13: 14, 14: 28}
sorted_dict  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
split cora: sorted_dict  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
weights after sort [54, 49, 39, 39, 29, 28, 22, 18, 17, 14, 14, 14, 10, 9, 5]

packs  [[1, 5, 7]]
res_tmp  [49 28 18]
GROUPS_weight  [[49, 28, 18]]
values_list  [49, 28, 18]
sorted dictionary  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[4, 14, 9]
keys ------end

remove bucket_id in sorted dict ids:  [1, 5, 7]
original bucket_ids :,  [4, 14, 9]
remove weights:  [49 28 18], 		------------sum 95

before remove, the weights list  [54, 49, 39, 39, 29, 28, 22, 18, 17, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [4, 14, 9]
left sorted_dict  {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
sorted_dict after remove_bucket_ids {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
after remove one pack weights,  [54, 39, 39, 29, 22, 17, 14, 14, 14, 10, 9, 5]
sum of left weights  266
packs  [[1, 2, 5]]
res_tmp  [39 39 17]
GROUPS_weight  [[49, 28, 18], [39, 39, 17]]
values_list  [39, 39, 17]
sorted dictionary  {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[2, 5, 6]
keys ------end

remove bucket_id in sorted dict ids:  [1, 2, 5]
original bucket_ids :,  [2, 5, 6]
remove weights:  [39 39 17], 		------------sum 95

before remove, the weights list  [54, 39, 39, 29, 22, 17, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [2, 5, 6]
left sorted_dict  {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
sorted_dict after remove_bucket_ids {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
after remove one pack weights,  [54, 29, 22, 14, 14, 14, 10, 9, 5]
sum of left weights  171
packs  [[0, 2, 6, 7]]
res_tmp  [54 22 10  9]
GROUPS_weight  [[49, 28, 18], [39, 39, 17], [54, 22, 10, 9]]
values_list  [54, 22, 10, 9]
sorted dictionary  {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[3, 8, 12, 0]
keys ------end

remove bucket_id in sorted dict ids:  [0, 2, 6, 7]
original bucket_ids :,  [3, 8, 12, 0]
remove weights:  [54 22 10  9], 		------------sum 95

before remove, the weights list  [54, 29, 22, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [3, 8, 12, 0]
left sorted_dict  {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
sorted_dict after remove_bucket_ids {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
after remove one pack weights,  [29, 14, 14, 14, 5]
sum of left weights  76
values_list  [29, 14, 14, 14, 5]
sorted dictionary  {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
keys ------
[1, 7, 11, 13, 10]
keys ------end
after original_index = get_index_by_value(sorted_dict, weights)  [1, 7, 11, 13, 10]
G_BUCKET_ID_list [[4, 14, 9], [2, 5, 6], [3, 8, 12, 0], [1, 7, 11, 13, 10]]
Groups_mem_list  [[49, 28, 18], [39, 39, 17], [54, 22, 10, 9], [29, 14, 14, 14, 5]]
G_BUCKET_ID_list length 4
backpack scheduling spend  0.0052738189697265625
current group_mem  0.09644472599029541
current group_mem  0.09673655033111572
current group_mem  0.09706250578165054
current group_mem  0.07823889702558517
batches output list generation spend  0.0007300376892089844
self.weights_list  [0.14285714285714285, 0.29285714285714287, 0.3357142857142857, 0.22857142857142856]
bkt_dst_nodes_list = self.get_in_degree_bucketing() spend:  0.011171102523803711
self.gen_batches_seeds_list(bkt_dst_nodes_list_local) spend  0.00607609748840332
local_to_global: src global  tensor([  48,  128,  122,   89,  129,   69,   97,  131,   99,  101,   74,  118,
           5,   12,   51,   77,   85,    7,   34,  107,   78,  138,   17,    3,
          30,   11,   45,   98,   10,   68,   66,   25,  102,   80,  137,  106,
          62,   82,  121,  116,   41,  123,    2,  114,   13,    0,   38,  132,
          26,   50,  111,  103,   59,   93,    1,  130,   84,  119,    4,  104,
          61,   44,   64,  135,   90,   20,   27,   96,   37,   72,  120,   14,
          58,   23,  109,   53,    9,  110,   21,   87,   71,   29,   52,   39,
          43,   88,    8,  108,  117,  126,   65,  105,   67,  125,   24,  133,
          40,  112,   49,   15,   47,  124,   42,    6,  115,  139,   16,   32,
         113,   31,   22,  134,   83,   94,   73,   76,   63,   36,   92,   18,
          95,   46,  136,   54,   57,   60,   70,   86,   19,   55,  127,   91,
          33,  100,   79,   56,   28,   81,   75,   35,  598,  714, 1031, 1662,
        1666, 2041, 2205, 2206, 2471,  233,  370,  392, 2270, 2454, 2455,  258,
         884, 1087, 1094, 1157, 1401, 1530, 1585, 1653, 2463,  441,  701,  604,
        1013, 1351, 1914, 1920, 1926, 2189,  661, 1353,  834, 2169, 2604,  281,
        1358, 1589,  544,  586, 1042, 1118, 1416, 1517, 2052, 2155, 2419,  255,
         388,  446,  454,  554,  581,  842, 1029, 1343, 1507, 1538, 1616, 1690,
        1851, 2010, 2030, 2112, 2165, 2166, 1629, 1659, 2546, 1001, 1318, 2661,
        2662,  457,  710, 1392, 2213, 2214, 2215,  659, 1803, 1065, 2487, 2488,
         208,  541,  971, 1113, 1650, 1219, 1329, 1418,  236,  306, 1776,  927,
        1315, 1316, 2140, 2544,  697,  738, 2162, 2343, 1655, 1839,  733, 1986,
        2303, 2667, 2668, 1521,  476, 2545,  391, 2631, 1301, 1344, 2011, 2317,
        1251, 1448, 1561, 1623, 1871, 1878, 2256,  257, 1117, 2049, 2144, 2329,
        2504, 2461,  485, 1138, 1634,  589,  802,  980, 1158, 1910, 2251, 2252,
        1076, 1501,  175,  596,  644,  332, 1454,  610, 2288, 2506, 1701, 1810,
         633, 1862, 2582,  429,  862,  863, 1160,  379,  479,  904, 1022, 1959,
        1441,  758, 1169, 1762, 2492, 2643,  484,  608, 1775, 1790,  580,  609,
         615, 1067, 1287, 1627, 1725, 2651,  550,  950, 1495, 2151,  652,  654,
        1982, 2017,  284, 2223, 2224, 2226,  646, 1537, 1549, 1901, 1016, 1256,
        1761, 2175, 2176,  401,  864, 2210, 1080, 1309, 2312, 1582, 2624, 2701,
        1209, 1737, 2616, 2095,  155,  156,  817, 1072, 2269, 2374, 2375,  606,
        2360, 2578, 2217, 1190, 2427, 1103,  483,  514,  816, 1842, 2405,  158,
        2034, 2075, 2077, 1715, 2159,  318, 1787,  153, 1789, 1337, 1661,  176,
        2094,  426, 1346,  459, 1772, 1779, 1805, 2093,  289, 1769, 1045, 1739,
         723, 2614,  567, 1161, 1262, 1599, 2279, 1043, 2310, 2164,  206, 2691,
         963, 2645, 1139, 1467, 2053, 2172, 2182, 1349, 1522, 1532, 1965, 2357,
         152, 2399, 2400,  841, 1394,  696, 1908, 1741,  162, 1882,  415, 2012,
        1527,  743,  851, 2178, 1713,  815, 2013, 1174, 1288, 1847,  269, 1996,
        1647, 2157, 2209,  259, 2537, 1551, 2045, 2079,  239,  543,  619,  771,
        1156, 1293, 1628, 2021, 2418, 1721, 2476,  282,  540, 2628,  458, 2363,
         201, 1636, 2139, 2141,  399,  452, 1670, 1777, 1784, 2082,  507,  866,
        1364,  487, 2080, 1090, 1093, 1271, 2367,  163, 1579, 1367, 1622, 2478,
        1372,  373, 1602,  973,  660,  910, 1780,  970, 1632, 2444, 2642,  279,
         518, 1850, 1973,  747, 1884, 1594, 1234, 1702, 1703, 2238,  406, 1520,
        2581,  195,  675,  934, 1649, 1966, 2263, 2355, 2490,  449,  558,  797,
         876, 1035, 1136, 1189, 1214, 1723, 1745, 1751, 2018, 1322, 1146, 1505,
        1552, 1640, 1781, 2106, 2107,  898, 1836, 1560, 1786, 2145,  334,  456,
         693,  734,  736,  861, 1303, 1535, 1580, 1838, 2054, 2074, 2181, 2183,
        2197, 2199, 2200, 2201, 1604, 2366,  831,  767, 2184, 1336, 2295, 1939,
         210,  323,  651,  787, 1079, 1983, 2020,  330, 1046, 2001, 2122, 2123,
        2380,  286,  588,  698,  911, 1051, 2040, 2119, 2120, 2121, 2056,  603,
        2097,  412,  447, 1849, 1687,  347,  423,  527, 2180,  583, 2222, 2225,
         895, 1296, 1913])
num_output  140
self.output_nids  140
output nodes length match
global output equals  True
partition total batch output list spend :  0.023227930068969727
self.buckets_partition() spend  sec:  0.017264366149902344
bucketing dataloader: layer  0
bucketing dataloader: the number of batches:  4
bucketing dataloader: global_batched_output_nid_list  [tensor([ 89,  17,   2, 132,  26,  59,  84,   4,  61,  20, 120,  14, 109, 110,
         52,  88,  65, 124,  22,  18]), tensor([ 69,  99, 101,   5,  51,  85,  78, 138,  30,  45,  68,  80, 121, 114,
          0, 111, 103,   1, 130, 119,  44,  64, 135,  37,  53,  87,  71,  39,
         43,   8, 108, 126,  67,  24,  40, 113,  76,  60,  91,  75,  35]), tensor([ 48, 128, 122,  74, 118,  12,   7,  34, 107,   3,  98,  66,  25, 137,
        106,  62,  41, 123,  38,  50,  93, 104,  90,  27,  96,  58,  23, 105,
        133, 112,  15,   6, 115,  16,  32,  31, 134,  63, 136,  57,  86,  19,
        127,  33,  56,  28,  81]), tensor([129,  97, 131,  77,  11,  10, 102,  82, 116,  13,  72,   9,  21,  29,
        117, 125,  49,  47,  42, 139,  83,  94,  73,  36,  92,  95,  46,  54,
         70,  55, 100,  79])]
check_connections_block*********************************
connection check : local_output_nid  20
connection check : local_output_nid  41
connection check : local_output_nid  47
connection check : local_output_nid  32

block_gen_time in "generate_blocks_for_one_layer_block"  0.008913755416870117

----------------------------------------
bucketing dataloader: layer  1
bucketing dataloader: num of batch  4
check_connections_block*********************************
connection check : local_output_nid  171
connection check : local_output_nid  198
connection check : local_output_nid  200
connection check : local_output_nid  158

block_gen_time in "generate_blocks_for_one_layer_block"  0.00928640365600586

block collection to dataloader spend  6.9141387939453125e-06
step  0
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 1.515625 GB
    Memory Allocated: 0.07007360458374023  GigaBytes
Max Memory Allocated: 0.07007360458374023  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 1.685546875 GB
    Memory Allocated: 0.15086078643798828  GigaBytes
Max Memory Allocated: 0.15499544143676758  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 1.685546875 GB
    Memory Allocated: 0.1508626937866211  GigaBytes
Max Memory Allocated: 0.15499544143676758  GigaBytes

step  1
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 1.822265625 GB
    Memory Allocated: 0.13756275177001953  GigaBytes
Max Memory Allocated: 0.27421140670776367  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 1.822265625 GB
    Memory Allocated: 0.22115468978881836  GigaBytes
Max Memory Allocated: 0.27421140670776367  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 1.822265625 GB
    Memory Allocated: 0.22115659713745117  GigaBytes
Max Memory Allocated: 0.27421140670776367  GigaBytes

step  2
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 1.916015625 GB
    Memory Allocated: 0.1374797821044922  GigaBytes
Max Memory Allocated: 0.33939170837402344  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 1.916015625 GB
    Memory Allocated: 0.22052764892578125  GigaBytes
Max Memory Allocated: 0.33939170837402344  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 1.916015625 GB
    Memory Allocated: 0.22052955627441406  GigaBytes
Max Memory Allocated: 0.33939170837402344  GigaBytes

step  3
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 1.916015625 GB
    Memory Allocated: 0.13734674453735352  GigaBytes
Max Memory Allocated: 0.33939170837402344  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 1.916015625 GB
    Memory Allocated: 0.20482969284057617  GigaBytes
Max Memory Allocated: 0.33939170837402344  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 1.916015625 GB
    Memory Allocated: 0.20483112335205078  GigaBytes
Max Memory Allocated: 0.33939170837402344  GigaBytes

----------------------------------------after optimizer
 Nvidia-smi: 1.978515625 GB
    Memory Allocated: 0.27185964584350586  GigaBytes
Max Memory Allocated: 0.36560964584350586  GigaBytes

----------------------------------------------------------pseudo_mini_loss sum 1.9461668729782104
pure train time :  0.6149160861968994
train time :  1.1893119812011719
end to end time :  1.2451722621917725
connection check time:  0.012253999710083008
block generation time  0.018200159072875977
generate_dataloader_bucket_block=======
get_in_degree_bucketing src global nid  tensor([  29,   48,   79,   69,   43,   66,  124,   75,   28,   63,   33,  127,
         114,    7,   17,   77,   34,   64,  110,   84,   51,   62,  104,   18,
         121,   25,  139,   54,   10,  109,   49,   67,   22,   57,   70,   19,
          11,  132,   52,   91,   38,  125,   68,   81,    0,  137,  115,  100,
          37,   47,    3,   46,    9,   96,   45,   88,   32,  111,  107,  123,
          86,   99,  122,   78,   76,   94,   40,   58,   41,   80,   73,  130,
          59,   31,  116,  133,   97,   42,   98,   44,   14,   72,   60,  128,
         131,   12,   74,  102,  119,  103,    4,   30,  118,    1,   92,   87,
         106,  101,   15,   36,  136,   53,   39,   24,   50,  112,    6,   65,
          71,  135,  113,   35,   82,   93,  138,   95,   83,  129,   90,   16,
           8,   13,   56,   26,  117,  120,   21,   23,   89,    2,   27,  105,
          85,    5,  126,   55,  108,  134,   20,   61,  963, 2645,  598,  714,
        1031, 1662, 1666, 2041, 2205, 2206, 2471,  603, 2097,  604, 1013, 1351,
        1914, 1920, 1926, 2189,  152, 1530, 1653, 2399, 2400, 2631,  306, 1367,
        1622, 2478,  583, 2222, 2223, 2224, 2225, 1687, 1322,  286,  588,  698,
         911, 1051, 2040, 2119, 2120, 2121, 2604,  610, 2288, 2506,  208,  927,
        1315, 1316, 2140,  659, 1803, 1358, 1209, 1737, 2616,  567, 1161, 1262,
        1599, 2279,  284, 2226,  457,  710, 1392, 2213, 2214, 2215,  485,  401,
         864, 1065, 2210, 1560, 1786, 2082, 2145,  589,  802,  980, 1158, 1910,
        2251, 2252, 1301, 1344, 2011, 2317,  660,  910, 1623, 1780, 2045,  767,
         476, 2545, 1661, 2093,  153,  176, 1045, 1346, 2092, 2095,  289,  563,
        1779,  519,  236, 1787, 2094, 1772, 1785,  426,  459, 2034,  282,  540,
        2628, 1234, 1702, 1703, 2238, 2418,  441, 2184, 1939, 1655, 1839,  379,
         479,  904, 1022, 1959, 1139, 1467, 2053, 2172, 2182,  330, 1046, 2001,
        2122, 2123, 2380,  429,  862,  863, 1160,  458, 2363,  391, 1986,  347,
         423,  527, 2180,  633, 1862, 2582, 2144, 2329, 2504,  973, 1602, 2056,
        1190, 2427,  163, 1579, 2544, 1604, 2366,  723, 2614, 2217,  733, 1219,
        2303, 2667, 2668, 1527, 1309,  696,  162, 1882, 1732,  851, 1394, 2178,
         815, 1174, 2012, 1658,  841,  300, 1741, 2017, 2010, 2014, 1677, 2013,
        2394,  279,  518, 1850, 1973,  758, 1169, 1762, 2492, 2643,  541,  971,
        1113, 1650, 2455, 1336, 2295, 2454, 1329, 1418, 2018,  195,  586,  675,
         934, 1649, 1966, 2263, 2355, 2357, 2490,  507,  866, 1364, 1715,  175,
         596,  644,  257, 1117, 2049,  449,  558,  797,  876, 1035, 1136, 1189,
        1214, 1723, 1745, 1751, 1982,  580,  609,  615, 1067, 1287, 1627, 1725,
        2651, 1594, 1076, 1501,  399,  452, 1670, 1777, 1784,  661, 1353, 1372,
        1521, 1582, 2624, 2701,  158, 2075, 2077, 1103,  233,  370,  392, 2270,
         834, 2169, 1001, 1318, 2661, 2662,  544, 1042, 1118, 1416, 1517, 2052,
        2155, 2419, 1251, 1448, 1561, 1871, 1878, 2256,  646, 1537, 1549, 1901,
         484,  608, 1775, 1790, 1016, 1256, 1761, 2175, 2176,  697,  738, 2162,
        2343,  255,  388,  446,  454,  554,  581,  842, 1029, 1343, 1507, 1538,
        1616, 1690, 1851, 2030, 2112, 2165, 2166,  652,  654,  898, 1836, 2164,
        2461,  281, 1589, 1090, 1093, 1271, 2367, 1146, 1505, 1552, 1640, 1781,
        2106, 2107,  831, 1739, 1349, 1522, 1532, 1634, 1965,  201, 1636, 1701,
        2139, 2141, 1441,  487, 2080,  373,  239,  543,  619,  771, 1156, 1293,
        1628, 2021,  206, 2691,  747, 1884,  895, 1296, 1913, 1138,  550,  950,
        1495, 2151, 1776,  334,  456,  693,  734,  736,  861, 1303, 1535, 1580,
        1838, 2054, 2074, 2181, 2183, 2197, 2199, 2200, 2201, 1520, 2581,  701,
         155,  156,  817,  970, 1632, 2444, 2642,  269, 1996, 1810,  412,  447,
        1849,  259, 2537,  483,  514,  816, 1842, 2405, 1043, 2310, 2159,  258,
         884, 1087, 1094, 1157, 1401, 1585, 2463,  332, 1454,  606, 2360, 2578,
        1721, 2476, 2487, 2488, 1629, 1659, 2546, 1551, 2079,  210,  323,  651,
         787, 1079, 1983, 2020, 1647, 2157, 2209,  406, 1072, 2269, 2374, 2375,
        1080, 2312])
get_in_degree_bucketing dst global nid  tensor([ 29,  48,  79,  69,  43,  66, 124,  75,  28,  63,  33, 127, 114,   7,
         17,  77,  34,  64, 110,  84,  51,  62, 104,  18, 121,  25, 139,  54,
         10, 109,  49,  67,  22,  57,  70,  19,  11, 132,  52,  91,  38, 125,
         68,  81,   0, 137, 115, 100,  37,  47,   3,  46,   9,  96,  45,  88,
         32, 111, 107, 123,  86,  99, 122,  78,  76,  94,  40,  58,  41,  80,
         73, 130,  59,  31, 116, 133,  97,  42,  98,  44,  14,  72,  60, 128,
        131,  12,  74, 102, 119, 103,   4,  30, 118,   1,  92,  87, 106, 101,
         15,  36, 136,  53,  39,  24,  50, 112,   6,  65,  71, 135, 113,  35,
         82,  93, 138,  95,  83, 129,  90,  16,   8,  13,  56,  26, 117, 120,
         21,  23,  89,   2,  27, 105,  85,   5, 126,  55, 108, 134,  20,  61])
get_in_degree_bucketing corresponding in degs tensor([ 2,  9,  2,  7,  6,  1,  5,  6,  1,  1,  9,  1,  3,  1,  5,  2,  1,  3,
         5,  5,  6,  1,  4,  5,  7,  4,  8,  2,  2, 25,  2,  3,  5,  1,  2,  1,
         2,  5,  5,  6,  4,  2,  3,  4,  3,  4,  1,  2,  3,  2,  1,  2,  2,  1,
         6, 25,  4,  6,  4,  4,  4,  6,  4,  3,  3, 11,  3,  1,  4,  3, 12,  3,
        10,  1,  2,  9,  2,  2,  1,  3,  5,  2,  3,  4,  2,  4,  9,  8,  6,  6,
         5,  6, 19,  3,  2,  3,  1,  3,  4,  8,  1,  3,  7,  7,  1,  4,  4, 10,
         3,  3,  3,  3,  2,  4,  3, 21,  2,  2,  4,  4,  3,  2,  4,  5,  2,  5,
         2,  1, 10,  5,  4,  4,  3,  3,  6, 12,  3,  1,  5,  5])
len(bkt)  20
local bkt nids  tensor([  5,   8,   9,  11,  13,  16,  21,  33,  35,  46,  50,  53,  67,  73,
         78,  96, 100, 104, 127, 137])
len(bkt)  25
local bkt nids  tensor([  0,   2,  15,  27,  28,  30,  34,  36,  41,  47,  49,  51,  52,  74,
         76,  77,  81,  84,  94, 112, 116, 117, 121, 124, 126])
len(bkt)  26
local bkt nids  tensor([ 12,  17,  31,  42,  44,  48,  63,  64,  66,  69,  71,  79,  82,  93,
         95,  97, 101, 108, 109, 110, 111, 114, 120, 132, 133, 136])
len(bkt)  22
local bkt nids  tensor([ 22,  25,  40,  43,  45,  56,  58,  59,  60,  62,  68,  83,  85,  98,
        105, 106, 113, 118, 119, 122, 130, 131])
len(bkt)  15
local bkt nids  tensor([  6,  14,  18,  19,  23,  32,  37,  38,  80,  90, 123, 125, 129, 138,
        139])
len(bkt)  11
local bkt nids  tensor([  4,   7,  20,  39,  54,  57,  61,  88,  89,  91, 134])
len(bkt)  4
local bkt nids  tensor([  3,  24, 102, 103])
len(bkt)  3
local bkt nids  tensor([26, 87, 99])
len(bkt)  4
local bkt nids  tensor([ 1, 10, 75, 86])
len(bkt)  3
local bkt nids  tensor([ 72, 107, 128])
len(bkt)  1
local bkt nids  tensor([65])
len(bkt)  2
local bkt nids  tensor([ 70, 135])
len(bkt)  1
local bkt nids  tensor([92])
len(bkt)  1
local bkt nids  tensor([115])
len(bkt)  2
local bkt nids  tensor([29, 55])
total indegree bucketing result ,  140
bucket partitioner: bkt_dst_nodes_list_local  [tensor([  5,   8,   9,  11,  13,  16,  21,  33,  35,  46,  50,  53,  67,  73,
         78,  96, 100, 104, 127, 137]), tensor([  0,   2,  15,  27,  28,  30,  34,  36,  41,  47,  49,  51,  52,  74,
         76,  77,  81,  84,  94, 112, 116, 117, 121, 124, 126]), tensor([ 12,  17,  31,  42,  44,  48,  63,  64,  66,  69,  71,  79,  82,  93,
         95,  97, 101, 108, 109, 110, 111, 114, 120, 132, 133, 136]), tensor([ 22,  25,  40,  43,  45,  56,  58,  59,  60,  62,  68,  83,  85,  98,
        105, 106, 113, 118, 119, 122, 130, 131]), tensor([  6,  14,  18,  19,  23,  32,  37,  38,  80,  90, 123, 125, 129, 138,
        139]), tensor([  4,   7,  20,  39,  54,  57,  61,  88,  89,  91, 134]), tensor([  3,  24, 102, 103]), tensor([26, 87, 99]), tensor([ 1, 10, 75, 86]), tensor([ 72, 107, 128]), tensor([65]), tensor([ 70, 135]), tensor([92]), tensor([115]), tensor([29, 55])]
---||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||--
memory_constraint:  0.095
sum(estimated_mem)  0.36848267912864685
len(estimated_mem)  15
grouping float:  the grouping_fanout_cora called successfully
capacity  95
 enter split_cora function
[9, 29, 39, 54, 49, 39, 17, 14, 22, 18, 5, 14, 10, 14, 28]
indexed_dict  {0: 9, 1: 29, 2: 39, 3: 54, 4: 49, 5: 39, 6: 17, 7: 14, 8: 22, 9: 18, 10: 5, 11: 14, 12: 10, 13: 14, 14: 28}
sorted_dict  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
split cora: sorted_dict  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
weights after sort [54, 49, 39, 39, 29, 28, 22, 18, 17, 14, 14, 14, 10, 9, 5]

packs  [[1, 5, 7]]
res_tmp  [49 28 18]
GROUPS_weight  [[49, 28, 18]]
values_list  [49, 28, 18]
sorted dictionary  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[4, 14, 9]
keys ------end

remove bucket_id in sorted dict ids:  [1, 5, 7]
original bucket_ids :,  [4, 14, 9]
remove weights:  [49 28 18], 		------------sum 95

before remove, the weights list  [54, 49, 39, 39, 29, 28, 22, 18, 17, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [4, 14, 9]
left sorted_dict  {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
sorted_dict after remove_bucket_ids {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
after remove one pack weights,  [54, 39, 39, 29, 22, 17, 14, 14, 14, 10, 9, 5]
sum of left weights  266
packs  [[1, 2, 5]]
res_tmp  [39 39 17]
GROUPS_weight  [[49, 28, 18], [39, 39, 17]]
values_list  [39, 39, 17]
sorted dictionary  {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[2, 5, 6]
keys ------end

remove bucket_id in sorted dict ids:  [1, 2, 5]
original bucket_ids :,  [2, 5, 6]
remove weights:  [39 39 17], 		------------sum 95

before remove, the weights list  [54, 39, 39, 29, 22, 17, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [2, 5, 6]
left sorted_dict  {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
sorted_dict after remove_bucket_ids {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
after remove one pack weights,  [54, 29, 22, 14, 14, 14, 10, 9, 5]
sum of left weights  171
packs  [[0, 2, 6, 7]]
res_tmp  [54 22 10  9]
GROUPS_weight  [[49, 28, 18], [39, 39, 17], [54, 22, 10, 9]]
values_list  [54, 22, 10, 9]
sorted dictionary  {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[3, 8, 12, 0]
keys ------end

remove bucket_id in sorted dict ids:  [0, 2, 6, 7]
original bucket_ids :,  [3, 8, 12, 0]
remove weights:  [54 22 10  9], 		------------sum 95

before remove, the weights list  [54, 29, 22, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [3, 8, 12, 0]
left sorted_dict  {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
sorted_dict after remove_bucket_ids {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
after remove one pack weights,  [29, 14, 14, 14, 5]
sum of left weights  76
values_list  [29, 14, 14, 14, 5]
sorted dictionary  {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
keys ------
[1, 7, 11, 13, 10]
keys ------end
after original_index = get_index_by_value(sorted_dict, weights)  [1, 7, 11, 13, 10]
G_BUCKET_ID_list [[4, 14, 9], [2, 5, 6], [3, 8, 12, 0], [1, 7, 11, 13, 10]]
Groups_mem_list  [[49, 28, 18], [39, 39, 17], [54, 22, 10, 9], [29, 14, 14, 14, 5]]
G_BUCKET_ID_list length 4
backpack scheduling spend  0.004897594451904297
current group_mem  0.09644472599029541
current group_mem  0.09673655033111572
current group_mem  0.09706250578165054
current group_mem  0.07823889702558517
batches output list generation spend  8.153915405273438e-05
self.weights_list  [0.14285714285714285, 0.29285714285714287, 0.3357142857142857, 0.22857142857142856]
bkt_dst_nodes_list = self.get_in_degree_bucketing() spend:  0.01052713394165039
self.gen_batches_seeds_list(bkt_dst_nodes_list_local) spend  0.005034685134887695
local_to_global: src global  tensor([  29,   48,   79,   69,   43,   66,  124,   75,   28,   63,   33,  127,
         114,    7,   17,   77,   34,   64,  110,   84,   51,   62,  104,   18,
         121,   25,  139,   54,   10,  109,   49,   67,   22,   57,   70,   19,
          11,  132,   52,   91,   38,  125,   68,   81,    0,  137,  115,  100,
          37,   47,    3,   46,    9,   96,   45,   88,   32,  111,  107,  123,
          86,   99,  122,   78,   76,   94,   40,   58,   41,   80,   73,  130,
          59,   31,  116,  133,   97,   42,   98,   44,   14,   72,   60,  128,
         131,   12,   74,  102,  119,  103,    4,   30,  118,    1,   92,   87,
         106,  101,   15,   36,  136,   53,   39,   24,   50,  112,    6,   65,
          71,  135,  113,   35,   82,   93,  138,   95,   83,  129,   90,   16,
           8,   13,   56,   26,  117,  120,   21,   23,   89,    2,   27,  105,
          85,    5,  126,   55,  108,  134,   20,   61,  963, 2645,  598,  714,
        1031, 1662, 1666, 2041, 2205, 2206, 2471,  603, 2097,  604, 1013, 1351,
        1914, 1920, 1926, 2189,  152, 1530, 1653, 2399, 2400, 2631,  306, 1367,
        1622, 2478,  583, 2222, 2223, 2224, 2225, 1687, 1322,  286,  588,  698,
         911, 1051, 2040, 2119, 2120, 2121, 2604,  610, 2288, 2506,  208,  927,
        1315, 1316, 2140,  659, 1803, 1358, 1209, 1737, 2616,  567, 1161, 1262,
        1599, 2279,  284, 2226,  457,  710, 1392, 2213, 2214, 2215,  485,  401,
         864, 1065, 2210, 1560, 1786, 2082, 2145,  589,  802,  980, 1158, 1910,
        2251, 2252, 1301, 1344, 2011, 2317,  660,  910, 1623, 1780, 2045,  767,
         476, 2545, 1661, 2093,  153,  176, 1045, 1346, 2092, 2095,  289,  563,
        1779,  519,  236, 1787, 2094, 1772, 1785,  426,  459, 2034,  282,  540,
        2628, 1234, 1702, 1703, 2238, 2418,  441, 2184, 1939, 1655, 1839,  379,
         479,  904, 1022, 1959, 1139, 1467, 2053, 2172, 2182,  330, 1046, 2001,
        2122, 2123, 2380,  429,  862,  863, 1160,  458, 2363,  391, 1986,  347,
         423,  527, 2180,  633, 1862, 2582, 2144, 2329, 2504,  973, 1602, 2056,
        1190, 2427,  163, 1579, 2544, 1604, 2366,  723, 2614, 2217,  733, 1219,
        2303, 2667, 2668, 1527, 1309,  696,  162, 1882, 1732,  851, 1394, 2178,
         815, 1174, 2012, 1658,  841,  300, 1741, 2017, 2010, 2014, 1677, 2013,
        2394,  279,  518, 1850, 1973,  758, 1169, 1762, 2492, 2643,  541,  971,
        1113, 1650, 2455, 1336, 2295, 2454, 1329, 1418, 2018,  195,  586,  675,
         934, 1649, 1966, 2263, 2355, 2357, 2490,  507,  866, 1364, 1715,  175,
         596,  644,  257, 1117, 2049,  449,  558,  797,  876, 1035, 1136, 1189,
        1214, 1723, 1745, 1751, 1982,  580,  609,  615, 1067, 1287, 1627, 1725,
        2651, 1594, 1076, 1501,  399,  452, 1670, 1777, 1784,  661, 1353, 1372,
        1521, 1582, 2624, 2701,  158, 2075, 2077, 1103,  233,  370,  392, 2270,
         834, 2169, 1001, 1318, 2661, 2662,  544, 1042, 1118, 1416, 1517, 2052,
        2155, 2419, 1251, 1448, 1561, 1871, 1878, 2256,  646, 1537, 1549, 1901,
         484,  608, 1775, 1790, 1016, 1256, 1761, 2175, 2176,  697,  738, 2162,
        2343,  255,  388,  446,  454,  554,  581,  842, 1029, 1343, 1507, 1538,
        1616, 1690, 1851, 2030, 2112, 2165, 2166,  652,  654,  898, 1836, 2164,
        2461,  281, 1589, 1090, 1093, 1271, 2367, 1146, 1505, 1552, 1640, 1781,
        2106, 2107,  831, 1739, 1349, 1522, 1532, 1634, 1965,  201, 1636, 1701,
        2139, 2141, 1441,  487, 2080,  373,  239,  543,  619,  771, 1156, 1293,
        1628, 2021,  206, 2691,  747, 1884,  895, 1296, 1913, 1138,  550,  950,
        1495, 2151, 1776,  334,  456,  693,  734,  736,  861, 1303, 1535, 1580,
        1838, 2054, 2074, 2181, 2183, 2197, 2199, 2200, 2201, 1520, 2581,  701,
         155,  156,  817,  970, 1632, 2444, 2642,  269, 1996, 1810,  412,  447,
        1849,  259, 2537,  483,  514,  816, 1842, 2405, 1043, 2310, 2159,  258,
         884, 1087, 1094, 1157, 1401, 1585, 2463,  332, 1454,  606, 2360, 2578,
        1721, 2476, 2487, 2488, 1629, 1659, 2546, 1551, 2079,  210,  323,  651,
         787, 1079, 1983, 2020, 1647, 2157, 2209,  406, 1072, 2269, 2374, 2375,
        1080, 2312])
num_output  140
self.output_nids  140
output nodes length match
global output equals  True
partition total batch output list spend :  0.020816326141357422
self.buckets_partition() spend  sec:  0.015619516372680664
bucketing dataloader: layer  0
bucketing dataloader: the number of batches:  4
bucketing dataloader: global_batched_output_nid_list  [tensor([124,  17, 110,  84,  18, 109,  22, 132,  52,  88,  59,  14,   4,  65,
         26, 120,  89,   2,  20,  61]), tensor([ 69,  43,  75, 114,  64,  51, 121,  67,  91,  68,   0,  37,  45, 111,
         99,  78,  76,  40,  80, 130,  44,  60, 119, 103,  30,   1,  87, 101,
         53,  39,  24,  71, 135, 113,  35, 138,   8,  85,   5, 126, 108]), tensor([ 48,  66,  28,  63,  33, 127,   7,  34,  62, 104,  25,  57,  19,  38,
         81, 137, 115,   3,  96,  32, 107, 123,  86, 122,  58,  41,  31, 133,
         98, 128,  12,  74, 118, 106,  15, 136,  50, 112,   6,  93,  90,  16,
         56,  23,  27, 105, 134]), tensor([ 29,  79,  77, 139,  54,  10,  49,  70,  11, 125, 100,  47,  46,   9,
         94,  73, 116,  97,  42,  72, 131, 102,  92,  36,  82,  95,  83, 129,
         13, 117,  21,  55])]
check_connections_block*********************************
connection check : local_output_nid  20
connection check : local_output_nid  41
connection check : local_output_nid  47
connection check : local_output_nid  32

block_gen_time in "generate_blocks_for_one_layer_block"  0.006726980209350586

----------------------------------------
bucketing dataloader: layer  1
bucketing dataloader: num of batch  4
check_connections_block*********************************
connection check : local_output_nid  171
connection check : local_output_nid  198
connection check : local_output_nid  200
connection check : local_output_nid  158

block_gen_time in "generate_blocks_for_one_layer_block"  0.00897669792175293

block collection to dataloader spend  6.9141387939453125e-06
step  0
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 1.978515625 GB
    Memory Allocated: 0.2718973159790039  GigaBytes
Max Memory Allocated: 0.36560964584350586  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 1.978515625 GB
    Memory Allocated: 0.3534965515136719  GigaBytes
Max Memory Allocated: 0.36560964584350586  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 1.978515625 GB
    Memory Allocated: 0.35349082946777344  GigaBytes
Max Memory Allocated: 0.36560964584350586  GigaBytes

step  1
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.013671875 GB
    Memory Allocated: 0.27206850051879883  GigaBytes
Max Memory Allocated: 0.47188615798950195  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.013671875 GB
    Memory Allocated: 0.35469722747802734  GigaBytes
Max Memory Allocated: 0.47188615798950195  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.013671875 GB
    Memory Allocated: 0.35469913482666016  GigaBytes
Max Memory Allocated: 0.47188615798950195  GigaBytes

step  2
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.044921875 GB
    Memory Allocated: 0.2719907760620117  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.044921875 GB
    Memory Allocated: 0.35481739044189453  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.044921875 GB
    Memory Allocated: 0.35481929779052734  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

step  3
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.044921875 GB
    Memory Allocated: 0.2718472480773926  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.044921875 GB
    Memory Allocated: 0.3395042419433594  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.044921875 GB
    Memory Allocated: 0.339505672454834  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after optimizer
 Nvidia-smi: 2.044921875 GB
    Memory Allocated: 0.27185964584350586  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------------------------pseudo_mini_loss sum 1.915675401687622
pure train time :  0.27982068061828613
train time :  0.33384227752685547
end to end time :  0.3806283473968506
connection check time:  0.008518218994140625
block generation time  0.015703678131103516
generate_dataloader_bucket_block=======
get_in_degree_bucketing src global nid  tensor([  53,   39,   50,   55,   10,   80,  123,   37,  134,   83,   51,  125,
          92,   25,  102,  111,   89,  119,    0,   49,  120,  126,   61,  139,
         105,   96,   28,   99,   88,  136,    1,   84,   95,   36,   17,    2,
         131,   45,   77,   26,   62,   60,   73,  110,  118,   29,  135,   97,
          56,   18,  127,   46,   33,   69,   32,   12,   42,   58,   54,    4,
         116,   19,   79,   64,   72,   76,   24,  108,  100,   13,   86,   85,
          98,    7,  107,   30,  104,   40,   52,   21,  122,   57,   48,   82,
          15,  117,   20,  124,   81,   23,  137,   44,  121,  109,   94,   41,
          66,   43,    9,  132,   22,    8,   65,   16,   35,  133,  128,    3,
          74,   78,  138,    5,  129,  103,  113,   90,   14,   59,  114,   67,
         106,   75,  101,   63,   71,   87,   93,   91,   11,  115,   34,   31,
          70,   38,   47,   27,  130,   68,  112,    6, 1103, 1358, 1739, 1349,
        1522, 1532, 1634, 1965, 2357, 1441,  210,  323,  651,  771,  787,  815,
        1079, 1156, 1983, 2020, 2021,  476, 2545,  257, 1117, 2049, 2455, 2604,
        1190, 2427,  406, 1520, 2581,  457,  710, 1392, 2213, 2214, 2215,  458,
        2363,  898, 1836, 1301, 1344, 2011, 2317, 1251, 1448, 1561, 1623, 1871,
        1878, 2256,  758, 1169, 1762, 2492, 2643,  258,  884, 1087, 1094, 1157,
        1401, 1530, 1585, 1653, 2463,  379,  646, 1537, 1549, 1901, 1959,  633,
        1862, 2582, 1666, 2034,  483,  514,  816, 1842, 2405,  236,  306, 1551,
        2045, 2079, 1080, 1309, 1416, 2162, 2312,  660,  910, 1780, 1721, 2476,
        2651, 2217, 1687, 2454, 1658, 2394, 2178,  498,  743, 1908,  737, 2013,
        2012, 1713, 1174, 1527, 1882,  162, 1288, 1494, 1741,  415, 2016,  300,
        1394,  831,  652,  654,  284, 2223, 2224, 2226,  334,  456,  693,  734,
         736,  861, 1303, 1535, 1580, 1602, 1628, 1838, 2054, 2074, 2181, 2182,
        2183, 2197, 2199, 2200, 2201, 1146, 1505, 1552, 1640, 1781, 2094, 2106,
        2107,  927, 1315, 1316, 2140,  332, 1454, 1986,  834, 2169,  733, 1219,
        2303, 2667, 2668,  659, 1803,  485,  449,  558,  797,  876, 1035, 1136,
        1189, 1214, 1723, 1745, 1751,  567, 1161, 1262, 1599, 2279,  255,  388,
         446,  454,  554,  581,  842, 1029, 1343, 1507, 1538, 1616, 1690, 1851,
        2010, 2030, 2112, 2165, 2166,  963, 2645, 2095, 2144,  661, 1353,  412,
         447, 1849, 1560, 1786, 2082, 2145, 1604, 2366,  286,  588,  698,  911,
        1051, 2040, 2119, 2120, 2121,  604, 1013, 1351, 1914, 1920, 1926, 2189,
         279,  518, 1850, 1973, 1001, 1318, 2661, 2662, 1372, 1715,  401,  767,
        1016, 1256, 1761, 2175, 2176, 1076, 1501, 1939,  603, 2097, 1209, 1737,
        2616, 2018,  201,  598, 1636, 1701, 2139, 2141, 1647, 2157, 2209, 2056,
        1810,  429, 1336, 2295, 1065, 2487, 2488, 1521,  208,  541,  971, 1113,
        1650,  697,  738, 2343,  864, 2210,  507,  866, 1364, 1139, 1467, 2053,
        2172, 1043, 2310, 2418,  714, 1031, 1662, 2041, 2205, 2206, 2471, 1138,
        1090, 1093, 1271, 2367,  259, 2537, 1072, 2269, 2270, 2374, 2375, 1367,
        1622, 2478,  347,  423,  527, 2180, 2159, 2329, 2504, 1582, 2624, 2701,
         589,  802,  980, 1158, 1910, 2251, 2252,  318, 2093, 1789, 1998, 1337,
        2092,  563, 1661,  153,  176, 1045,  426,  459, 1769,  289, 1772, 1805,
        1779, 1785,  195,  586,  675,  934, 1649, 1966, 2263, 2355, 2490,  175,
         596,  644, 2631,  152, 2399, 2400,  723, 2614,  479,  904, 1022, 1234,
        1702, 1703, 2238,  269,  281, 1996,  239,  543,  619, 1293, 2419,  970,
        1632, 2444, 2642,  895, 1296, 1913,  399,  452, 1670, 1777, 1784,  233,
         370,  392, 2544,  544, 1042, 1118, 1517, 2052, 2155, 1329, 1418, 1776,
        1629, 1659, 2546,  441,  701,  484,  608, 1775, 1790,  540,  747, 1884,
         155,  156,  817,  158, 2075, 2077,  580,  609,  615, 1067, 1287, 1627,
        1725,  610, 2288, 2506,  282, 2628, 2461,  583, 2222, 2225, 1589, 1322,
         206, 2691, 2164,  550,  950, 1495, 2151,  330, 1046, 2001, 2122, 2123,
        2380, 1655, 1839,  973, 1594, 2184,  862,  863, 1160,  163, 1579,  606,
        2360, 2578, 1982, 2017,  391,  487, 2080,  373])
get_in_degree_bucketing dst global nid  tensor([ 53,  39,  50,  55,  10,  80, 123,  37, 134,  83,  51, 125,  92,  25,
        102, 111,  89, 119,   0,  49, 120, 126,  61, 139, 105,  96,  28,  99,
         88, 136,   1,  84,  95,  36,  17,   2, 131,  45,  77,  26,  62,  60,
         73, 110, 118,  29, 135,  97,  56,  18, 127,  46,  33,  69,  32,  12,
         42,  58,  54,   4, 116,  19,  79,  64,  72,  76,  24, 108, 100,  13,
         86,  85,  98,   7, 107,  30, 104,  40,  52,  21, 122,  57,  48,  82,
         15, 117,  20, 124,  81,  23, 137,  44, 121, 109,  94,  41,  66,  43,
          9, 132,  22,   8,  65,  16,  35, 133, 128,   3,  74,  78, 138,   5,
        129, 103, 113,  90,  14,  59, 114,  67, 106,  75, 101,  63,  71,  87,
         93,  91,  11, 115,  34,  31,  70,  38,  47,  27, 130,  68, 112,   6])
get_in_degree_bucketing corresponding in degs tensor([ 3,  7,  1, 12,  2,  3,  4,  3,  1,  2,  6,  2,  2,  4,  8,  6, 10,  6,
         3,  2,  5,  6,  5,  8,  4,  1,  1,  6, 25,  1,  3,  5, 21,  8,  5,  5,
         2,  6,  2,  5,  1,  3, 12,  5, 19,  2,  3,  2,  4,  5,  1,  2,  9,  7,
         4,  4,  2,  1,  2,  5,  2,  1,  2,  3,  2,  3,  7,  3,  2,  2,  4,  3,
         1,  1,  4,  6,  4,  3,  5,  2,  4,  1,  9,  2,  4,  2,  5,  5,  4,  1,
         4,  3,  7, 25, 11,  4,  1,  6,  2,  5,  5,  3, 10,  4,  3,  9,  4,  1,
         9,  3,  3,  3,  2,  6,  3,  4,  5, 10,  3,  3,  1,  6,  3,  1,  3,  3,
         4,  6,  2,  1,  1,  1,  2,  4,  2,  4,  3,  3,  4,  4])
len(bkt)  20
local bkt nids  tensor([  2,   8,  25,  26,  29,  40,  50,  57,  61,  72,  73,  81,  89,  96,
        107, 120, 123, 129, 130, 131])
len(bkt)  25
local bkt nids  tensor([  4,   9,  11,  12,  19,  36,  38,  45,  47,  51,  56,  58,  60,  62,
         64,  68,  69,  79,  83,  85,  98, 112, 128, 132, 134])
len(bkt)  26
local bkt nids  tensor([  0,   5,   7,  18,  30,  41,  46,  63,  65,  67,  71,  77,  91, 101,
        104, 109, 110, 111, 114, 118, 119, 122, 124, 125, 136, 137])
len(bkt)  22
local bkt nids  tensor([  6,  13,  24,  48,  54,  55,  70,  74,  76,  80,  84,  88,  90,  95,
        103, 106, 115, 126, 133, 135, 138, 139])
len(bkt)  15
local bkt nids  tensor([ 20,  22,  31,  34,  35,  39,  43,  49,  59,  78,  86,  87,  99, 100,
        116])
len(bkt)  11
local bkt nids  tensor([ 10,  15,  17,  21,  27,  37,  75,  97, 113, 121, 127])
len(bkt)  4
local bkt nids  tensor([ 1, 53, 66, 92])
len(bkt)  3
local bkt nids  tensor([14, 23, 33])
len(bkt)  4
local bkt nids  tensor([ 52,  82, 105, 108])
len(bkt)  3
local bkt nids  tensor([ 16, 102, 117])
len(bkt)  1
local bkt nids  tensor([94])
len(bkt)  2
local bkt nids  tensor([ 3, 42])
len(bkt)  1
local bkt nids  tensor([44])
len(bkt)  1
local bkt nids  tensor([32])
len(bkt)  2
local bkt nids  tensor([28, 93])
total indegree bucketing result ,  140
bucket partitioner: bkt_dst_nodes_list_local  [tensor([  2,   8,  25,  26,  29,  40,  50,  57,  61,  72,  73,  81,  89,  96,
        107, 120, 123, 129, 130, 131]), tensor([  4,   9,  11,  12,  19,  36,  38,  45,  47,  51,  56,  58,  60,  62,
         64,  68,  69,  79,  83,  85,  98, 112, 128, 132, 134]), tensor([  0,   5,   7,  18,  30,  41,  46,  63,  65,  67,  71,  77,  91, 101,
        104, 109, 110, 111, 114, 118, 119, 122, 124, 125, 136, 137]), tensor([  6,  13,  24,  48,  54,  55,  70,  74,  76,  80,  84,  88,  90,  95,
        103, 106, 115, 126, 133, 135, 138, 139]), tensor([ 20,  22,  31,  34,  35,  39,  43,  49,  59,  78,  86,  87,  99, 100,
        116]), tensor([ 10,  15,  17,  21,  27,  37,  75,  97, 113, 121, 127]), tensor([ 1, 53, 66, 92]), tensor([14, 23, 33]), tensor([ 52,  82, 105, 108]), tensor([ 16, 102, 117]), tensor([94]), tensor([ 3, 42]), tensor([44]), tensor([32]), tensor([28, 93])]
---||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||--
memory_constraint:  0.095
sum(estimated_mem)  0.36848267912864685
len(estimated_mem)  15
grouping float:  the grouping_fanout_cora called successfully
capacity  95
 enter split_cora function
[9, 29, 39, 54, 49, 39, 17, 14, 22, 18, 5, 14, 10, 14, 28]
indexed_dict  {0: 9, 1: 29, 2: 39, 3: 54, 4: 49, 5: 39, 6: 17, 7: 14, 8: 22, 9: 18, 10: 5, 11: 14, 12: 10, 13: 14, 14: 28}
sorted_dict  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
split cora: sorted_dict  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
weights after sort [54, 49, 39, 39, 29, 28, 22, 18, 17, 14, 14, 14, 10, 9, 5]

packs  [[1, 5, 7]]
res_tmp  [49 28 18]
GROUPS_weight  [[49, 28, 18]]
values_list  [49, 28, 18]
sorted dictionary  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[4, 14, 9]
keys ------end

remove bucket_id in sorted dict ids:  [1, 5, 7]
original bucket_ids :,  [4, 14, 9]
remove weights:  [49 28 18], 		------------sum 95

before remove, the weights list  [54, 49, 39, 39, 29, 28, 22, 18, 17, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [4, 14, 9]
left sorted_dict  {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
sorted_dict after remove_bucket_ids {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
after remove one pack weights,  [54, 39, 39, 29, 22, 17, 14, 14, 14, 10, 9, 5]
sum of left weights  266
packs  [[1, 2, 5]]
res_tmp  [39 39 17]
GROUPS_weight  [[49, 28, 18], [39, 39, 17]]
values_list  [39, 39, 17]
sorted dictionary  {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[2, 5, 6]
keys ------end

remove bucket_id in sorted dict ids:  [1, 2, 5]
original bucket_ids :,  [2, 5, 6]
remove weights:  [39 39 17], 		------------sum 95

before remove, the weights list  [54, 39, 39, 29, 22, 17, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [2, 5, 6]
left sorted_dict  {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
sorted_dict after remove_bucket_ids {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
after remove one pack weights,  [54, 29, 22, 14, 14, 14, 10, 9, 5]
sum of left weights  171
packs  [[0, 2, 6, 7]]
res_tmp  [54 22 10  9]
GROUPS_weight  [[49, 28, 18], [39, 39, 17], [54, 22, 10, 9]]
values_list  [54, 22, 10, 9]
sorted dictionary  {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[3, 8, 12, 0]
keys ------end

remove bucket_id in sorted dict ids:  [0, 2, 6, 7]
original bucket_ids :,  [3, 8, 12, 0]
remove weights:  [54 22 10  9], 		------------sum 95

before remove, the weights list  [54, 29, 22, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [3, 8, 12, 0]
left sorted_dict  {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
sorted_dict after remove_bucket_ids {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
after remove one pack weights,  [29, 14, 14, 14, 5]
sum of left weights  76
values_list  [29, 14, 14, 14, 5]
sorted dictionary  {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
keys ------
[1, 7, 11, 13, 10]
keys ------end
after original_index = get_index_by_value(sorted_dict, weights)  [1, 7, 11, 13, 10]
G_BUCKET_ID_list [[4, 14, 9], [2, 5, 6], [3, 8, 12, 0], [1, 7, 11, 13, 10]]
Groups_mem_list  [[49, 28, 18], [39, 39, 17], [54, 22, 10, 9], [29, 14, 14, 14, 5]]
G_BUCKET_ID_list length 4
backpack scheduling spend  0.004915475845336914
current group_mem  0.09644472599029541
current group_mem  0.09673655033111572
current group_mem  0.09706250578165054
current group_mem  0.07823889702558517
batches output list generation spend  8.320808410644531e-05
self.weights_list  [0.14285714285714285, 0.29285714285714287, 0.3357142857142857, 0.22857142857142856]
bkt_dst_nodes_list = self.get_in_degree_bucketing() spend:  0.012671947479248047
self.gen_batches_seeds_list(bkt_dst_nodes_list_local) spend  0.005055427551269531
local_to_global: src global  tensor([  53,   39,   50,   55,   10,   80,  123,   37,  134,   83,   51,  125,
          92,   25,  102,  111,   89,  119,    0,   49,  120,  126,   61,  139,
         105,   96,   28,   99,   88,  136,    1,   84,   95,   36,   17,    2,
         131,   45,   77,   26,   62,   60,   73,  110,  118,   29,  135,   97,
          56,   18,  127,   46,   33,   69,   32,   12,   42,   58,   54,    4,
         116,   19,   79,   64,   72,   76,   24,  108,  100,   13,   86,   85,
          98,    7,  107,   30,  104,   40,   52,   21,  122,   57,   48,   82,
          15,  117,   20,  124,   81,   23,  137,   44,  121,  109,   94,   41,
          66,   43,    9,  132,   22,    8,   65,   16,   35,  133,  128,    3,
          74,   78,  138,    5,  129,  103,  113,   90,   14,   59,  114,   67,
         106,   75,  101,   63,   71,   87,   93,   91,   11,  115,   34,   31,
          70,   38,   47,   27,  130,   68,  112,    6, 1103, 1358, 1739, 1349,
        1522, 1532, 1634, 1965, 2357, 1441,  210,  323,  651,  771,  787,  815,
        1079, 1156, 1983, 2020, 2021,  476, 2545,  257, 1117, 2049, 2455, 2604,
        1190, 2427,  406, 1520, 2581,  457,  710, 1392, 2213, 2214, 2215,  458,
        2363,  898, 1836, 1301, 1344, 2011, 2317, 1251, 1448, 1561, 1623, 1871,
        1878, 2256,  758, 1169, 1762, 2492, 2643,  258,  884, 1087, 1094, 1157,
        1401, 1530, 1585, 1653, 2463,  379,  646, 1537, 1549, 1901, 1959,  633,
        1862, 2582, 1666, 2034,  483,  514,  816, 1842, 2405,  236,  306, 1551,
        2045, 2079, 1080, 1309, 1416, 2162, 2312,  660,  910, 1780, 1721, 2476,
        2651, 2217, 1687, 2454, 1658, 2394, 2178,  498,  743, 1908,  737, 2013,
        2012, 1713, 1174, 1527, 1882,  162, 1288, 1494, 1741,  415, 2016,  300,
        1394,  831,  652,  654,  284, 2223, 2224, 2226,  334,  456,  693,  734,
         736,  861, 1303, 1535, 1580, 1602, 1628, 1838, 2054, 2074, 2181, 2182,
        2183, 2197, 2199, 2200, 2201, 1146, 1505, 1552, 1640, 1781, 2094, 2106,
        2107,  927, 1315, 1316, 2140,  332, 1454, 1986,  834, 2169,  733, 1219,
        2303, 2667, 2668,  659, 1803,  485,  449,  558,  797,  876, 1035, 1136,
        1189, 1214, 1723, 1745, 1751,  567, 1161, 1262, 1599, 2279,  255,  388,
         446,  454,  554,  581,  842, 1029, 1343, 1507, 1538, 1616, 1690, 1851,
        2010, 2030, 2112, 2165, 2166,  963, 2645, 2095, 2144,  661, 1353,  412,
         447, 1849, 1560, 1786, 2082, 2145, 1604, 2366,  286,  588,  698,  911,
        1051, 2040, 2119, 2120, 2121,  604, 1013, 1351, 1914, 1920, 1926, 2189,
         279,  518, 1850, 1973, 1001, 1318, 2661, 2662, 1372, 1715,  401,  767,
        1016, 1256, 1761, 2175, 2176, 1076, 1501, 1939,  603, 2097, 1209, 1737,
        2616, 2018,  201,  598, 1636, 1701, 2139, 2141, 1647, 2157, 2209, 2056,
        1810,  429, 1336, 2295, 1065, 2487, 2488, 1521,  208,  541,  971, 1113,
        1650,  697,  738, 2343,  864, 2210,  507,  866, 1364, 1139, 1467, 2053,
        2172, 1043, 2310, 2418,  714, 1031, 1662, 2041, 2205, 2206, 2471, 1138,
        1090, 1093, 1271, 2367,  259, 2537, 1072, 2269, 2270, 2374, 2375, 1367,
        1622, 2478,  347,  423,  527, 2180, 2159, 2329, 2504, 1582, 2624, 2701,
         589,  802,  980, 1158, 1910, 2251, 2252,  318, 2093, 1789, 1998, 1337,
        2092,  563, 1661,  153,  176, 1045,  426,  459, 1769,  289, 1772, 1805,
        1779, 1785,  195,  586,  675,  934, 1649, 1966, 2263, 2355, 2490,  175,
         596,  644, 2631,  152, 2399, 2400,  723, 2614,  479,  904, 1022, 1234,
        1702, 1703, 2238,  269,  281, 1996,  239,  543,  619, 1293, 2419,  970,
        1632, 2444, 2642,  895, 1296, 1913,  399,  452, 1670, 1777, 1784,  233,
         370,  392, 2544,  544, 1042, 1118, 1517, 2052, 2155, 1329, 1418, 1776,
        1629, 1659, 2546,  441,  701,  484,  608, 1775, 1790,  540,  747, 1884,
         155,  156,  817,  158, 2075, 2077,  580,  609,  615, 1067, 1287, 1627,
        1725,  610, 2288, 2506,  282, 2628, 2461,  583, 2222, 2225, 1589, 1322,
         206, 2691, 2164,  550,  950, 1495, 2151,  330, 1046, 2001, 2122, 2123,
        2380, 1655, 1839,  973, 1594, 2184,  862,  863, 1160,  163, 1579,  606,
        2360, 2578, 1982, 2017,  391,  487, 2080,  373])
num_output  140
self.output_nids  140
output nodes length match
global output equals  True
partition total batch output list spend :  0.022947311401367188
self.buckets_partition() spend  sec:  0.01774120330810547
bucketing dataloader: layer  0
bucketing dataloader: the number of batches:  4
bucketing dataloader: global_batched_output_nid_list  [tensor([ 89, 120,  61,  88,  84,  17,   2,  26, 110,  18,   4,  52,  20, 124,
        109, 132,  22,  65,  14,  59]), tensor([ 53,  39,  80,  37,  51, 111, 119,   0, 126,  99,   1,  45,  60, 135,
         69,  64,  76,  24, 108,  85,  30,  40,  44, 121,  43,   8,  35,  78,
        138,   5, 103, 113, 114,  67,  75, 101,  71,  87,  91, 130,  68]), tensor([ 50, 123, 134,  25, 105,  96,  28, 136,  62, 118,  56, 127,  33,  32,
         12,  58,  19,  86,  98,   7, 107, 104, 122,  57,  48,  15,  81,  23,
        137,  41,  66,  16, 133, 128,   3,  74,  90, 106,  63,  93, 115,  34,
         31,  38,  27, 112,   6]), tensor([ 55,  10,  83, 125,  92, 102,  49, 139,  95,  36, 131,  77,  73,  29,
         97,  46,  42,  54, 116,  79,  72, 100,  13,  21,  82, 117,  94,   9,
        129,  11,  70,  47])]
check_connections_block*********************************
connection check : local_output_nid  20
connection check : local_output_nid  41
connection check : local_output_nid  47
connection check : local_output_nid  32

block_gen_time in "generate_blocks_for_one_layer_block"  0.006956815719604492

----------------------------------------
bucketing dataloader: layer  1
bucketing dataloader: num of batch  4
check_connections_block*********************************
connection check : local_output_nid  172
connection check : local_output_nid  198
connection check : local_output_nid  200
connection check : local_output_nid  158

block_gen_time in "generate_blocks_for_one_layer_block"  0.009304285049438477

block collection to dataloader spend  6.4373016357421875e-06
step  0
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.044921875 GB
    Memory Allocated: 0.27193450927734375  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.044921875 GB
    Memory Allocated: 0.3536977767944336  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.044921875 GB
    Memory Allocated: 0.35369205474853516  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

step  1
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.2720632553100586  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.3546919822692871  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.3546938896179199  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

step  2
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.27202272415161133  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35481739044189453  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35481929779052734  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

step  3
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.2718238830566406  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.3393068313598633  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.3393082618713379  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after optimizer
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.2718362808227539  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------------------------pseudo_mini_loss sum 1.9072291851043701
pure train time :  0.2832674980163574
train time :  0.33240532875061035
end to end time :  0.3821144104003906
connection check time:  0.008668661117553711
block generation time  0.01626110076904297
generate_dataloader_bucket_block=======
get_in_degree_bucketing src global nid  tensor([ 106,   38,   72,   55,   86,   23,  110,   44,   73,  133,   52,  135,
         104,   16,  118,   65,  112,  107,   98,   30,    9,   74,   76,   50,
         127,  132,  103,   84,  138,   12,   28,   91,   70,   66,   43,  109,
         131,  120,  111,   71,   21,  101,   42,   14,   25,  139,   58,   27,
          11,   35,  126,   33,   75,   60,   97,   15,   99,    8,   87,   82,
          59,   36,   34,   18,   85,  137,   26,   24,   13,  105,  114,  122,
           3,   57,   92,  100,   37,  108,   41,   53,  134,   64,   47,  125,
          79,    6,   39,    4,  115,  128,   48,   95,   67,  117,  129,  123,
          80,   22,   46,   61,   81,   69,   94,    0,  116,  136,   68,  113,
          40,   17,    2,  121,   29,    7,  102,   83,   62,   88,   19,   51,
           5,   56,   20,  130,   32,    1,   90,   89,   77,   63,   78,  124,
         119,   45,   96,   54,   31,   49,   93,   10, 2461,  429,  862,  863,
        1160, 1103, 1358,  210,  323,  651,  771,  787,  815, 1079, 1156, 1983,
        2020, 2021, 1336, 2034, 2295, 2159,  567, 1161, 1262, 1599, 2279, 1582,
        2624, 2701,  449,  558,  797,  876, 1035, 1136, 1189, 1214, 1723, 1745,
        1751,  399,  452, 1623, 1670, 1777, 1784, 2045, 2082, 1139, 1467, 2053,
        2172, 2182, 2095, 2144,  401,  864, 1065, 2210,  970, 1632, 2444, 2642,
         255,  388,  446,  454,  554,  581,  842, 1029, 1343, 1507, 1538, 1616,
        1690, 1851, 2010, 2030, 2112, 2165, 2166,  239,  543,  619, 1293, 1628,
        2418, 2419,  306,  487, 2080,  541,  971, 1113, 1650, 1521,  697,  738,
        1416, 2162, 2343,  723, 2614,  544,  586, 1042, 1118, 1517, 2052, 2155,
        2018, 2178, 1441, 2604,  379,  479,  904, 1022, 1959,  484,  608, 1775,
        1790,  284, 2223, 2224, 2226,  236, 1776, 1001, 1318, 2661, 2662, 1687,
         330, 1046, 2001, 2122, 2123, 2380,  441, 2184, 2631,  152,  963, 1530,
        1653, 2399, 2400,  426,  176, 1769, 1787, 1998,  610,  563,  459, 1661,
        1785, 1772, 2093,  318, 1337,  519, 1624,  289, 2094,  153, 2092, 1779,
         834, 2169,  483,  514,  816, 1842, 2405,  758, 1169, 1762, 2492, 2643,
         206, 1986, 2691, 1043, 2310,  281, 1589, 1372,  158, 2075, 2077, 2668,
        1301, 1344, 2011, 2317,  660,  910, 1780, 1715,  606, 1810, 2360, 2578,
        1655, 1839,  895, 1296, 1913, 1551, 2079,  286,  588,  698,  911, 1051,
        2040, 2119, 2120, 2121,  583, 2222, 2225, 1527,  661, 1353, 1090, 1093,
        1271, 2367, 2454, 2455,  269, 1996, 2164, 1138, 1634,  580,  609,  615,
        1067, 1287, 1627, 1725, 2651, 1146, 1505, 1552, 1640, 1781, 2106, 2107,
        1560, 1786, 2145, 2487, 2488, 2329, 2504,  201,  598, 1636, 1701, 2139,
        2141, 1721, 2476, 2288, 2506, 2544,  898, 1836, 1602, 2056, 1190, 2427,
        1647, 2157, 2209,  175,  596,  644, 1914, 1739,  406, 1209, 1737, 2616,
         163, 1579,  458, 2363,  603, 2097,  373, 1349, 1522, 1532, 1965, 2357,
        1016, 1256, 1761, 2175, 2176,  973,  233,  370,  392, 2270,  714, 1031,
        1662, 1666, 2041, 2205, 2206, 2471,  334,  456,  693,  734,  736,  861,
        1303, 1535, 1580, 1838, 2054, 2074, 2181, 2183, 2197, 2199, 2200, 2201,
         282,  540, 2628,  259, 2537,  701,  257, 1117, 2049, 1234, 1702, 1703,
        2238, 1604, 2366, 1080, 1309, 2312,  347,  423,  527, 2180,  604, 1013,
        1351, 1920, 1926, 2189,  195,  675,  733,  934, 1649, 1966, 2263, 2355,
        2490,  633, 1862, 2582, 1076, 1501,  831,  391,  747, 1884,  507,  866,
        1364,  927, 1315, 1316, 2140,  332, 1454,  589,  802,  980, 1158, 1910,
        2251, 2252, 2645,  208, 1251, 1448, 1561, 1871, 1878, 2256, 1520, 2581,
         485, 2014, 1908, 2394,  696,  300, 1732, 1394,  851, 2016,  415, 2015,
         162, 2013,  737, 1288, 1882,  841, 1677,  743, 2017, 1939,  457,  710,
        1392, 2213, 2214, 2215, 1629, 1659, 2546,  412,  447, 1849, 1072, 2269,
        2374, 2375, 1982,  279,  518, 1850, 1973,  652,  654,  155,  156,  817,
         258,  884, 1087, 1094, 1157, 1401, 1585, 2463,  659, 1803, 1322, 1219,
        1329, 1418, 1367, 1622, 2478,  646, 1537, 1549, 1901, 2303, 2667, 2217,
         767, 1594,  550,  950, 1495, 2151,  476, 2545])
get_in_degree_bucketing dst global nid  tensor([106,  38,  72,  55,  86,  23, 110,  44,  73, 133,  52, 135, 104,  16,
        118,  65, 112, 107,  98,  30,   9,  74,  76,  50, 127, 132, 103,  84,
        138,  12,  28,  91,  70,  66,  43, 109, 131, 120, 111,  71,  21, 101,
         42,  14,  25, 139,  58,  27,  11,  35, 126,  33,  75,  60,  97,  15,
         99,   8,  87,  82,  59,  36,  34,  18,  85, 137,  26,  24,  13, 105,
        114, 122,   3,  57,  92, 100,  37, 108,  41,  53, 134,  64,  47, 125,
         79,   6,  39,   4, 115, 128,  48,  95,  67, 117, 129, 123,  80,  22,
         46,  61,  81,  69,  94,   0, 116, 136,  68, 113,  40,  17,   2, 121,
         29,   7, 102,  83,  62,  88,  19,  51,   5,  56,  20, 130,  32,   1,
         90,  89,  77,  63,  78, 124, 119,  45,  96,  54,  31,  49,  93,  10])
get_in_degree_bucketing corresponding in degs tensor([ 1,  4,  2, 12,  4,  1,  5,  3, 12,  9,  5,  3,  4,  4, 19, 10,  4,  4,
         1,  6,  2,  9,  3,  1,  1,  5,  6,  5,  3,  4,  1,  6,  2,  1,  6, 25,
         2,  5,  6,  3,  2,  3,  2,  5,  4,  8,  1,  4,  2,  3,  6,  9,  6,  3,
         2,  4,  6,  3,  3,  2, 10,  8,  1,  5,  3,  4,  5,  7,  2,  4,  3,  4,
         1,  1,  2,  2,  3,  3,  4,  3,  1,  3,  2,  2,  2,  4,  7,  5,  1,  4,
         9, 21,  3,  2,  2,  4,  3,  5,  2,  5,  4,  7, 11,  3,  2,  1,  3,  3,
         3,  5,  5,  7,  2,  1,  8,  2,  1, 25,  1,  6,  3,  4,  5,  3,  4,  3,
         4, 10,  2,  1,  3,  5,  6,  6,  1,  2,  1,  2,  4,  2])
len(bkt)  20
local bkt nids  tensor([  0,   5,  18,  23,  24,  30,  33,  46,  62,  72,  73,  80,  88, 105,
        113, 116, 118, 129, 134, 136])
len(bkt)  25
local bkt nids  tensor([  2,  20,  32,  36,  40,  42,  48,  54,  59,  68,  74,  75,  82,  83,
         84,  93,  94,  98, 104, 112, 115, 128, 135, 137, 139])
len(bkt)  26
local bkt nids  tensor([  7,  11,  22,  28,  39,  41,  49,  53,  57,  58,  64,  70,  76,  77,
         79,  81,  92,  96, 103, 106, 107, 108, 120, 123, 125, 130])
len(bkt)  22
local bkt nids  tensor([  1,   4,  12,  13,  16,  17,  29,  44,  47,  55,  65,  69,  71,  78,
         85,  89,  95, 100, 121, 124, 126, 138])
len(bkt)  15
local bkt nids  tensor([  6,  10,  25,  27,  37,  43,  63,  66,  87,  97,  99, 109, 110, 122,
        131])
len(bkt)  11
local bkt nids  tensor([ 19,  26,  31,  34,  38,  50,  52,  56, 119, 132, 133])
len(bkt)  4
local bkt nids  tensor([ 67,  86, 101, 111])
len(bkt)  3
local bkt nids  tensor([ 45,  61, 114])
len(bkt)  4
local bkt nids  tensor([ 9, 21, 51, 90])
len(bkt)  3
local bkt nids  tensor([ 15,  60, 127])
len(bkt)  1
local bkt nids  tensor([102])
len(bkt)  2
local bkt nids  tensor([3, 8])
len(bkt)  1
local bkt nids  tensor([14])
len(bkt)  1
local bkt nids  tensor([91])
len(bkt)  2
local bkt nids  tensor([ 35, 117])
total indegree bucketing result ,  140
bucket partitioner: bkt_dst_nodes_list_local  [tensor([  0,   5,  18,  23,  24,  30,  33,  46,  62,  72,  73,  80,  88, 105,
        113, 116, 118, 129, 134, 136]), tensor([  2,  20,  32,  36,  40,  42,  48,  54,  59,  68,  74,  75,  82,  83,
         84,  93,  94,  98, 104, 112, 115, 128, 135, 137, 139]), tensor([  7,  11,  22,  28,  39,  41,  49,  53,  57,  58,  64,  70,  76,  77,
         79,  81,  92,  96, 103, 106, 107, 108, 120, 123, 125, 130]), tensor([  1,   4,  12,  13,  16,  17,  29,  44,  47,  55,  65,  69,  71,  78,
         85,  89,  95, 100, 121, 124, 126, 138]), tensor([  6,  10,  25,  27,  37,  43,  63,  66,  87,  97,  99, 109, 110, 122,
        131]), tensor([ 19,  26,  31,  34,  38,  50,  52,  56, 119, 132, 133]), tensor([ 67,  86, 101, 111]), tensor([ 45,  61, 114]), tensor([ 9, 21, 51, 90]), tensor([ 15,  60, 127]), tensor([102]), tensor([3, 8]), tensor([14]), tensor([91]), tensor([ 35, 117])]
---||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||--
memory_constraint:  0.095
sum(estimated_mem)  0.36848267912864685
len(estimated_mem)  15
grouping float:  the grouping_fanout_cora called successfully
capacity  95
 enter split_cora function
[9, 29, 39, 54, 49, 39, 17, 14, 22, 18, 5, 14, 10, 14, 28]
indexed_dict  {0: 9, 1: 29, 2: 39, 3: 54, 4: 49, 5: 39, 6: 17, 7: 14, 8: 22, 9: 18, 10: 5, 11: 14, 12: 10, 13: 14, 14: 28}
sorted_dict  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
split cora: sorted_dict  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
weights after sort [54, 49, 39, 39, 29, 28, 22, 18, 17, 14, 14, 14, 10, 9, 5]

packs  [[1, 5, 7]]
res_tmp  [49 28 18]
GROUPS_weight  [[49, 28, 18]]
values_list  [49, 28, 18]
sorted dictionary  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[4, 14, 9]
keys ------end

remove bucket_id in sorted dict ids:  [1, 5, 7]
original bucket_ids :,  [4, 14, 9]
remove weights:  [49 28 18], 		------------sum 95

before remove, the weights list  [54, 49, 39, 39, 29, 28, 22, 18, 17, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [4, 14, 9]
left sorted_dict  {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
sorted_dict after remove_bucket_ids {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
after remove one pack weights,  [54, 39, 39, 29, 22, 17, 14, 14, 14, 10, 9, 5]
sum of left weights  266
packs  [[1, 2, 5]]
res_tmp  [39 39 17]
GROUPS_weight  [[49, 28, 18], [39, 39, 17]]
values_list  [39, 39, 17]
sorted dictionary  {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[2, 5, 6]
keys ------end

remove bucket_id in sorted dict ids:  [1, 2, 5]
original bucket_ids :,  [2, 5, 6]
remove weights:  [39 39 17], 		------------sum 95

before remove, the weights list  [54, 39, 39, 29, 22, 17, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [2, 5, 6]
left sorted_dict  {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
sorted_dict after remove_bucket_ids {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
after remove one pack weights,  [54, 29, 22, 14, 14, 14, 10, 9, 5]
sum of left weights  171
packs  [[0, 2, 6, 7]]
res_tmp  [54 22 10  9]
GROUPS_weight  [[49, 28, 18], [39, 39, 17], [54, 22, 10, 9]]
values_list  [54, 22, 10, 9]
sorted dictionary  {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[3, 8, 12, 0]
keys ------end

remove bucket_id in sorted dict ids:  [0, 2, 6, 7]
original bucket_ids :,  [3, 8, 12, 0]
remove weights:  [54 22 10  9], 		------------sum 95

before remove, the weights list  [54, 29, 22, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [3, 8, 12, 0]
left sorted_dict  {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
sorted_dict after remove_bucket_ids {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
after remove one pack weights,  [29, 14, 14, 14, 5]
sum of left weights  76
values_list  [29, 14, 14, 14, 5]
sorted dictionary  {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
keys ------
[1, 7, 11, 13, 10]
keys ------end
after original_index = get_index_by_value(sorted_dict, weights)  [1, 7, 11, 13, 10]
G_BUCKET_ID_list [[4, 14, 9], [2, 5, 6], [3, 8, 12, 0], [1, 7, 11, 13, 10]]
Groups_mem_list  [[49, 28, 18], [39, 39, 17], [54, 22, 10, 9], [29, 14, 14, 14, 5]]
G_BUCKET_ID_list length 4
backpack scheduling spend  0.0049250125885009766
current group_mem  0.09644472599029541
current group_mem  0.09673655033111572
current group_mem  0.09706250578165054
current group_mem  0.07823889702558517
batches output list generation spend  8.368492126464844e-05
self.weights_list  [0.14285714285714285, 0.29285714285714287, 0.3357142857142857, 0.22857142857142856]
bkt_dst_nodes_list = self.get_in_degree_bucketing() spend:  0.012817621231079102
self.gen_batches_seeds_list(bkt_dst_nodes_list_local) spend  0.005065202713012695
local_to_global: src global  tensor([ 106,   38,   72,   55,   86,   23,  110,   44,   73,  133,   52,  135,
         104,   16,  118,   65,  112,  107,   98,   30,    9,   74,   76,   50,
         127,  132,  103,   84,  138,   12,   28,   91,   70,   66,   43,  109,
         131,  120,  111,   71,   21,  101,   42,   14,   25,  139,   58,   27,
          11,   35,  126,   33,   75,   60,   97,   15,   99,    8,   87,   82,
          59,   36,   34,   18,   85,  137,   26,   24,   13,  105,  114,  122,
           3,   57,   92,  100,   37,  108,   41,   53,  134,   64,   47,  125,
          79,    6,   39,    4,  115,  128,   48,   95,   67,  117,  129,  123,
          80,   22,   46,   61,   81,   69,   94,    0,  116,  136,   68,  113,
          40,   17,    2,  121,   29,    7,  102,   83,   62,   88,   19,   51,
           5,   56,   20,  130,   32,    1,   90,   89,   77,   63,   78,  124,
         119,   45,   96,   54,   31,   49,   93,   10, 2461,  429,  862,  863,
        1160, 1103, 1358,  210,  323,  651,  771,  787,  815, 1079, 1156, 1983,
        2020, 2021, 1336, 2034, 2295, 2159,  567, 1161, 1262, 1599, 2279, 1582,
        2624, 2701,  449,  558,  797,  876, 1035, 1136, 1189, 1214, 1723, 1745,
        1751,  399,  452, 1623, 1670, 1777, 1784, 2045, 2082, 1139, 1467, 2053,
        2172, 2182, 2095, 2144,  401,  864, 1065, 2210,  970, 1632, 2444, 2642,
         255,  388,  446,  454,  554,  581,  842, 1029, 1343, 1507, 1538, 1616,
        1690, 1851, 2010, 2030, 2112, 2165, 2166,  239,  543,  619, 1293, 1628,
        2418, 2419,  306,  487, 2080,  541,  971, 1113, 1650, 1521,  697,  738,
        1416, 2162, 2343,  723, 2614,  544,  586, 1042, 1118, 1517, 2052, 2155,
        2018, 2178, 1441, 2604,  379,  479,  904, 1022, 1959,  484,  608, 1775,
        1790,  284, 2223, 2224, 2226,  236, 1776, 1001, 1318, 2661, 2662, 1687,
         330, 1046, 2001, 2122, 2123, 2380,  441, 2184, 2631,  152,  963, 1530,
        1653, 2399, 2400,  426,  176, 1769, 1787, 1998,  610,  563,  459, 1661,
        1785, 1772, 2093,  318, 1337,  519, 1624,  289, 2094,  153, 2092, 1779,
         834, 2169,  483,  514,  816, 1842, 2405,  758, 1169, 1762, 2492, 2643,
         206, 1986, 2691, 1043, 2310,  281, 1589, 1372,  158, 2075, 2077, 2668,
        1301, 1344, 2011, 2317,  660,  910, 1780, 1715,  606, 1810, 2360, 2578,
        1655, 1839,  895, 1296, 1913, 1551, 2079,  286,  588,  698,  911, 1051,
        2040, 2119, 2120, 2121,  583, 2222, 2225, 1527,  661, 1353, 1090, 1093,
        1271, 2367, 2454, 2455,  269, 1996, 2164, 1138, 1634,  580,  609,  615,
        1067, 1287, 1627, 1725, 2651, 1146, 1505, 1552, 1640, 1781, 2106, 2107,
        1560, 1786, 2145, 2487, 2488, 2329, 2504,  201,  598, 1636, 1701, 2139,
        2141, 1721, 2476, 2288, 2506, 2544,  898, 1836, 1602, 2056, 1190, 2427,
        1647, 2157, 2209,  175,  596,  644, 1914, 1739,  406, 1209, 1737, 2616,
         163, 1579,  458, 2363,  603, 2097,  373, 1349, 1522, 1532, 1965, 2357,
        1016, 1256, 1761, 2175, 2176,  973,  233,  370,  392, 2270,  714, 1031,
        1662, 1666, 2041, 2205, 2206, 2471,  334,  456,  693,  734,  736,  861,
        1303, 1535, 1580, 1838, 2054, 2074, 2181, 2183, 2197, 2199, 2200, 2201,
         282,  540, 2628,  259, 2537,  701,  257, 1117, 2049, 1234, 1702, 1703,
        2238, 1604, 2366, 1080, 1309, 2312,  347,  423,  527, 2180,  604, 1013,
        1351, 1920, 1926, 2189,  195,  675,  733,  934, 1649, 1966, 2263, 2355,
        2490,  633, 1862, 2582, 1076, 1501,  831,  391,  747, 1884,  507,  866,
        1364,  927, 1315, 1316, 2140,  332, 1454,  589,  802,  980, 1158, 1910,
        2251, 2252, 2645,  208, 1251, 1448, 1561, 1871, 1878, 2256, 1520, 2581,
         485, 2014, 1908, 2394,  696,  300, 1732, 1394,  851, 2016,  415, 2015,
         162, 2013,  737, 1288, 1882,  841, 1677,  743, 2017, 1939,  457,  710,
        1392, 2213, 2214, 2215, 1629, 1659, 2546,  412,  447, 1849, 1072, 2269,
        2374, 2375, 1982,  279,  518, 1850, 1973,  652,  654,  155,  156,  817,
         258,  884, 1087, 1094, 1157, 1401, 1585, 2463,  659, 1803, 1322, 1219,
        1329, 1418, 1367, 1622, 2478,  646, 1537, 1549, 1901, 2303, 2667, 2217,
         767, 1594,  550,  950, 1495, 2151,  476, 2545])
num_output  140
self.output_nids  140
output nodes length match
global output equals  True
partition total batch output list spend :  0.023276329040527344
self.buckets_partition() spend  sec:  0.01795196533203125
bucketing dataloader: layer  0
bucketing dataloader: the number of batches:  4
bucketing dataloader: global_batched_output_nid_list  [tensor([110,  52,  65, 132,  84, 109, 120,  14,  59,  18,  26,   4,  22,  61,
         17,   2,  88,  20,  89, 124]), tensor([ 44, 135,  30,  76, 103, 138,  91,  43, 111,  71, 101,  35, 126,  75,
         60,  99,   8,  87,  85,  24, 114,  37, 108,  53,  64,  39,  67,  80,
         69,   0,  68, 113,  40, 121,  51,   5, 130,   1,  78, 119,  45]), tensor([106,  38,  86,  23, 133, 104,  16, 118, 112, 107,  98,  74,  50, 127,
         12,  28,  66,  25,  58,  27,  33,  15,  34, 137, 105, 122,   3,  57,
         41, 134,   6, 115, 128,  48, 123,  81, 136,   7,  62,  19,  56,  32,
         90,  63,  96,  31,  93]), tensor([ 72,  55,  73,   9,  70, 131,  21,  42, 139,  11,  97,  82,  36,  13,
         92, 100,  47, 125,  79,  95, 117, 129,  46,  94, 116,  29, 102,  83,
         77,  54,  49,  10])]
check_connections_block*********************************
connection check : local_output_nid  20
connection check : local_output_nid  41
connection check : local_output_nid  47
connection check : local_output_nid  32

block_gen_time in "generate_blocks_for_one_layer_block"  0.007171154022216797

----------------------------------------
bucketing dataloader: layer  1
bucketing dataloader: num of batch  4
check_connections_block*********************************
connection check : local_output_nid  173
connection check : local_output_nid  198
connection check : local_output_nid  200
connection check : local_output_nid  158

block_gen_time in "generate_blocks_for_one_layer_block"  0.009336709976196289

block collection to dataloader spend  6.67572021484375e-06
step  0
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.2720146179199219  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.3548398017883301  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35483407974243164  GigaBytes
Max Memory Allocated: 0.4729342460632324  GigaBytes

step  1
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.27200984954833984  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35463857650756836  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35464048385620117  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

step  2
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.27202272415161133  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35481739044189453  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35481929779052734  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

step  3
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.2718238830566406  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.3393068313598633  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.3393082618713379  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after optimizer
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.2718362808227539  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------------------------pseudo_mini_loss sum 1.885077953338623
pure train time :  0.24986577033996582
train time :  0.3106570243835449
end to end time :  0.361067533493042
connection check time:  0.00871419906616211
block generation time  0.016507863998413086
generate_dataloader_bucket_block=======
get_in_degree_bucketing src global nid  tensor([ 128,   15,  123,   91,  135,   81,  110,   66,   41,  139,   33,   26,
          44,   77,   22,    0,   65,   59,    7,    9,   57,   99,  100,  103,
          51,   39,   95,   13,   30,   74,   75,   84,   19,   36,   64,  102,
          16,  109,  137,   48,  105,   78,   27,   85,  115,   37,   34,  138,
         129,   70,   61,   18,  118,  106,   21,  114,   86,   60,  119,  113,
          31,   80,   92,   56,  136,    3,  108,   94,  131,   17,    2,  133,
          88,   32,   28,    1,  116,  104,   23,  124,   96,   49,    6,   40,
          90,   98,  120,   20,   89,   14,   87,   72,   55,   69,   82,   43,
         127,   29,    5,   35,  126,    4,   97,   67,  134,    8,   73,  117,
          79,   68,   47,   42,   10,   83,   38,   58,  130,  125,  112,   71,
         132,  101,   25,   54,   52,   62,   53,   45,  111,   11,   46,   12,
         107,   24,   76,  121,   63,  122,   50,   93,  233,  370,  392, 2270,
        1090, 1093, 1271, 2367, 2455, 2604,  330, 1046, 2001, 2122, 2123, 2380,
        2095, 2144,  347,  423,  527, 2180,  567, 1161, 1262, 1599, 2279, 2631,
         175,  596,  644, 1914,  306,  660,  910, 1623, 1780, 2045,  286,  588,
         698,  911, 1051, 2040, 2119, 2120, 2121, 2454, 1582, 2624, 2701,  659,
        1803, 1234, 1702, 1703, 2238,  633, 1862, 2582,  239,  543,  619,  771,
        1156, 1293, 1628, 2021, 2418, 2419,  580,  609,  615, 1067, 1287, 1358,
        1627, 1725, 2651,  208,  723, 2614, 1602, 2056,  484,  608, 1775, 1790,
         457,  710, 1392, 2213, 2214, 2215, 1349, 1522, 1532, 1634, 1965, 2357,
         334,  456,  693,  734,  736,  861, 1303, 1535, 1580, 1838, 2054, 2074,
        2181, 2182, 2183, 2197, 2199, 2200, 2201, 1701, 1810,  697,  738, 1416,
        2162, 2343,  544,  586, 1042, 1118, 1517, 2052, 2155,  583, 2222, 2223,
        2224, 2225,  284, 2226, 1939, 1146, 1505, 1552, 1640, 1781, 2094, 2106,
        2107, 1209, 1737, 2616, 1251, 1448, 1561, 1871, 1878, 2256,  970, 1632,
        2444, 2642, 1337, 2092, 1805, 1772, 1624,  318, 2093, 1787, 1045,  289,
         563, 1346, 1789,  426, 1779, 1661,  153, 1785, 1998, 1769, 2329, 2504,
         598,  714, 1031, 1662, 1666, 2041, 2205, 2206, 2471, 1721, 2476, 1219,
        1329, 1418,  606, 2360, 2578, 1065, 2487, 2488,  973, 1190, 2427,  236,
        1776,  441,  701, 2184, 1080, 1309, 2312, 1560, 1786, 2082, 2145,  255,
         388,  446,  454,  554,  581,  842, 1029, 1343, 1507, 1538, 1616, 1690,
        1851, 2010, 2030, 2112, 2165, 2166, 2461, 1043, 2310,  610, 2288, 2506,
         429, 1336, 2034, 2295, 1527,  379,  646, 1537, 1549, 1901, 1959,  540,
         747, 1884, 1594,  257, 1117, 2049,  898, 1836,  412,  447, 1849,  831,
        2544, 1647, 2157, 2209,  195,  675,  733,  934, 1649, 1966, 2263, 2355,
        2490,  834, 2169,  927, 1315, 1316, 2140,  332, 1454, 1986,  399,  452,
        1670, 1777, 1784, 2015, 1174,  841, 1713, 2013, 1677, 1494,  498, 1732,
        2014,  162, 1658, 2011, 2012,  300, 1908,  696, 2394, 1288, 1741,  415,
        2178,  279,  518, 1850, 1973, 1687,  652,  654, 1076, 1501,  401,  864,
        2210, 2159, 1367, 1622, 2478, 2217,  373,  507,  866, 1364,  155,  156,
         817, 1521,  483,  514,  816, 1842, 2405, 1072, 2269, 2374, 2375,  258,
         884, 1087, 1094, 1157, 1401, 1530, 1585, 1653, 2463,  158, 2075, 2077,
        2668, 2164, 1103,  210,  323,  651,  787,  815, 1079, 1983, 2020,  604,
        1013, 1351, 1920, 1926, 2189, 1138,  152,  963, 2399, 2400, 2645, 1629,
        1659, 2546,  895, 1296, 1913, 1551, 2079, 1016, 1256, 1761, 2175, 2176,
         661, 1353,  282, 2628,  406,  269,  281, 1996,  449,  558,  797,  876,
        1035, 1136, 1189, 1214, 1723, 1745, 1751,  259, 2537,  603, 2097,  391,
         163, 1579, 1372,  476, 2545, 1520, 2581,  862,  863, 1160, 1715, 1982,
        2017,  458, 2363,  487, 2080,  206, 2691,  479,  904, 1022, 1589, 1301,
        1344, 2317,  767, 1139, 1467, 2053, 2172,  485, 1739, 2303, 2667,  758,
        1169, 1762, 2492, 2643, 1655, 1839, 1604, 2366, 1001, 1318, 2661, 2662,
         541,  971, 1113, 1650,  201, 1636, 2139, 2141, 2018,  589,  802,  980,
        1158, 1910, 2251, 2252, 1322, 1441,  550,  950, 1495, 2151])
get_in_degree_bucketing dst global nid  tensor([128,  15, 123,  91, 135,  81, 110,  66,  41, 139,  33,  26,  44,  77,
         22,   0,  65,  59,   7,   9,  57,  99, 100, 103,  51,  39,  95,  13,
         30,  74,  75,  84,  19,  36,  64, 102,  16, 109, 137,  48, 105,  78,
         27,  85, 115,  37,  34, 138, 129,  70,  61,  18, 118, 106,  21, 114,
         86,  60, 119, 113,  31,  80,  92,  56, 136,   3, 108,  94, 131,  17,
          2, 133,  88,  32,  28,   1, 116, 104,  23, 124,  96,  49,   6,  40,
         90,  98, 120,  20,  89,  14,  87,  72,  55,  69,  82,  43, 127,  29,
          5,  35, 126,   4,  97,  67, 134,   8,  73, 117,  79,  68,  47,  42,
         10,  83,  38,  58, 130, 125, 112,  71, 132, 101,  25,  54,  52,  62,
         53,  45, 111,  11,  46,  12, 107,  24,  76, 121,  63, 122,  50,  93])
get_in_degree_bucketing corresponding in degs tensor([ 4,  4,  4,  6,  3,  4,  5,  1,  4,  8,  9,  5,  3,  2,  5,  3, 10, 10,
         1,  2,  1,  6,  2,  6,  6,  7, 21,  2,  6,  9,  6,  5,  1,  8,  3,  8,
         4, 25,  4,  9,  4,  3,  4,  3,  1,  3,  1,  3,  2,  2,  5,  5, 19,  1,
         2,  3,  4,  3,  6,  3,  1,  3,  2,  4,  1,  1,  3, 11,  2,  5,  5,  9,
        25,  4,  1,  3,  2,  4,  1,  5,  1,  2,  4,  3,  4,  1,  5,  5, 10,  5,
         3,  2, 12,  7,  2,  6,  1,  2,  3,  3,  6,  5,  2,  3,  1,  3, 12,  2,
         2,  3,  2,  2,  2,  2,  4,  1,  3,  2,  4,  3,  5,  3,  4,  2,  5,  1,
         3,  6,  6,  2,  2,  4,  4,  7,  3,  7,  1,  4,  1,  4])
len(bkt)  20
local bkt nids  tensor([  7,  18,  20,  32,  44,  46,  53,  60,  64,  65,  74,  78,  80,  85,
         96, 104, 115, 125, 136, 138])
len(bkt)  25
local bkt nids  tensor([ 13,  19,  22,  27,  48,  49,  54,  62,  68,  76,  81,  91,  94,  97,
        102, 107, 108, 110, 111, 112, 113, 117, 123, 129, 130])
len(bkt)  26
local bkt nids  tensor([  4,  12,  15,  34,  41,  43,  45,  47,  55,  57,  59,  61,  66,  75,
         83,  90,  98,  99, 103, 105, 109, 116, 119, 121, 126, 134])
len(bkt)  22
local bkt nids  tensor([  0,   1,   2,   5,   8,  36,  38,  40,  42,  56,  63,  73,  77,  82,
         84, 114, 118, 122, 131, 132, 137, 139])
len(bkt)  15
local bkt nids  tensor([  6,  11,  14,  31,  50,  51,  69,  70,  79,  86,  87,  89, 101, 120,
        124])
len(bkt)  11
local bkt nids  tensor([  3,  21,  23,  24,  28,  30,  58,  95, 100, 127, 128])
len(bkt)  4
local bkt nids  tensor([ 25,  93, 133, 135])
len(bkt)  3
local bkt nids  tensor([ 9, 33, 35])
len(bkt)  4
local bkt nids  tensor([10, 29, 39, 71])
len(bkt)  3
local bkt nids  tensor([16, 17, 88])
len(bkt)  1
local bkt nids  tensor([67])
len(bkt)  2
local bkt nids  tensor([ 92, 106])
len(bkt)  1
local bkt nids  tensor([52])
len(bkt)  1
local bkt nids  tensor([26])
len(bkt)  2
local bkt nids  tensor([37, 72])
total indegree bucketing result ,  140
bucket partitioner: bkt_dst_nodes_list_local  [tensor([  7,  18,  20,  32,  44,  46,  53,  60,  64,  65,  74,  78,  80,  85,
         96, 104, 115, 125, 136, 138]), tensor([ 13,  19,  22,  27,  48,  49,  54,  62,  68,  76,  81,  91,  94,  97,
        102, 107, 108, 110, 111, 112, 113, 117, 123, 129, 130]), tensor([  4,  12,  15,  34,  41,  43,  45,  47,  55,  57,  59,  61,  66,  75,
         83,  90,  98,  99, 103, 105, 109, 116, 119, 121, 126, 134]), tensor([  0,   1,   2,   5,   8,  36,  38,  40,  42,  56,  63,  73,  77,  82,
         84, 114, 118, 122, 131, 132, 137, 139]), tensor([  6,  11,  14,  31,  50,  51,  69,  70,  79,  86,  87,  89, 101, 120,
        124]), tensor([  3,  21,  23,  24,  28,  30,  58,  95, 100, 127, 128]), tensor([ 25,  93, 133, 135]), tensor([ 9, 33, 35]), tensor([10, 29, 39, 71]), tensor([16, 17, 88]), tensor([67]), tensor([ 92, 106]), tensor([52]), tensor([26]), tensor([37, 72])]
---||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||-----||--
memory_constraint:  0.095
sum(estimated_mem)  0.36848267912864685
len(estimated_mem)  15
grouping float:  the grouping_fanout_cora called successfully
capacity  95
 enter split_cora function
[9, 29, 39, 54, 49, 39, 17, 14, 22, 18, 5, 14, 10, 14, 28]
indexed_dict  {0: 9, 1: 29, 2: 39, 3: 54, 4: 49, 5: 39, 6: 17, 7: 14, 8: 22, 9: 18, 10: 5, 11: 14, 12: 10, 13: 14, 14: 28}
sorted_dict  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
split cora: sorted_dict  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
weights after sort [54, 49, 39, 39, 29, 28, 22, 18, 17, 14, 14, 14, 10, 9, 5]

packs  [[1, 5, 7]]
res_tmp  [49 28 18]
GROUPS_weight  [[49, 28, 18]]
values_list  [49, 28, 18]
sorted dictionary  {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[4, 14, 9]
keys ------end

remove bucket_id in sorted dict ids:  [1, 5, 7]
original bucket_ids :,  [4, 14, 9]
remove weights:  [49 28 18], 		------------sum 95

before remove, the weights list  [54, 49, 39, 39, 29, 28, 22, 18, 17, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 4: 49, 2: 39, 5: 39, 1: 29, 14: 28, 8: 22, 9: 18, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [4, 14, 9]
left sorted_dict  {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
sorted_dict after remove_bucket_ids {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
after remove one pack weights,  [54, 39, 39, 29, 22, 17, 14, 14, 14, 10, 9, 5]
sum of left weights  266
packs  [[1, 2, 5]]
res_tmp  [39 39 17]
GROUPS_weight  [[49, 28, 18], [39, 39, 17]]
values_list  [39, 39, 17]
sorted dictionary  {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[2, 5, 6]
keys ------end

remove bucket_id in sorted dict ids:  [1, 2, 5]
original bucket_ids :,  [2, 5, 6]
remove weights:  [39 39 17], 		------------sum 95

before remove, the weights list  [54, 39, 39, 29, 22, 17, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 2: 39, 5: 39, 1: 29, 8: 22, 6: 17, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [2, 5, 6]
left sorted_dict  {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
sorted_dict after remove_bucket_ids {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
after remove one pack weights,  [54, 29, 22, 14, 14, 14, 10, 9, 5]
sum of left weights  171
packs  [[0, 2, 6, 7]]
res_tmp  [54 22 10  9]
GROUPS_weight  [[49, 28, 18], [39, 39, 17], [54, 22, 10, 9]]
values_list  [54, 22, 10, 9]
sorted dictionary  {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
keys ------
[3, 8, 12, 0]
keys ------end

remove bucket_id in sorted dict ids:  [0, 2, 6, 7]
original bucket_ids :,  [3, 8, 12, 0]
remove weights:  [54 22 10  9], 		------------sum 95

before remove, the weights list  [54, 29, 22, 14, 14, 14, 10, 9, 5]
sorted_dict before remove_bucket_ids {3: 54, 1: 29, 8: 22, 7: 14, 11: 14, 13: 14, 12: 10, 0: 9, 10: 5}
original_bucket_ids  [3, 8, 12, 0]
left sorted_dict  {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
sorted_dict after remove_bucket_ids {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
after remove one pack weights,  [29, 14, 14, 14, 5]
sum of left weights  76
values_list  [29, 14, 14, 14, 5]
sorted dictionary  {1: 29, 7: 14, 11: 14, 13: 14, 10: 5}
keys ------
[1, 7, 11, 13, 10]
keys ------end
after original_index = get_index_by_value(sorted_dict, weights)  [1, 7, 11, 13, 10]
G_BUCKET_ID_list [[4, 14, 9], [2, 5, 6], [3, 8, 12, 0], [1, 7, 11, 13, 10]]
Groups_mem_list  [[49, 28, 18], [39, 39, 17], [54, 22, 10, 9], [29, 14, 14, 14, 5]]
G_BUCKET_ID_list length 4
backpack scheduling spend  0.004900932312011719
current group_mem  0.09644472599029541
current group_mem  0.09673655033111572
current group_mem  0.09706250578165054
current group_mem  0.07823889702558517
batches output list generation spend  7.891654968261719e-05
self.weights_list  [0.14285714285714285, 0.29285714285714287, 0.3357142857142857, 0.22857142857142856]
bkt_dst_nodes_list = self.get_in_degree_bucketing() spend:  0.012003421783447266
self.gen_batches_seeds_list(bkt_dst_nodes_list_local) spend  0.005033969879150391
local_to_global: src global  tensor([ 128,   15,  123,   91,  135,   81,  110,   66,   41,  139,   33,   26,
          44,   77,   22,    0,   65,   59,    7,    9,   57,   99,  100,  103,
          51,   39,   95,   13,   30,   74,   75,   84,   19,   36,   64,  102,
          16,  109,  137,   48,  105,   78,   27,   85,  115,   37,   34,  138,
         129,   70,   61,   18,  118,  106,   21,  114,   86,   60,  119,  113,
          31,   80,   92,   56,  136,    3,  108,   94,  131,   17,    2,  133,
          88,   32,   28,    1,  116,  104,   23,  124,   96,   49,    6,   40,
          90,   98,  120,   20,   89,   14,   87,   72,   55,   69,   82,   43,
         127,   29,    5,   35,  126,    4,   97,   67,  134,    8,   73,  117,
          79,   68,   47,   42,   10,   83,   38,   58,  130,  125,  112,   71,
         132,  101,   25,   54,   52,   62,   53,   45,  111,   11,   46,   12,
         107,   24,   76,  121,   63,  122,   50,   93,  233,  370,  392, 2270,
        1090, 1093, 1271, 2367, 2455, 2604,  330, 1046, 2001, 2122, 2123, 2380,
        2095, 2144,  347,  423,  527, 2180,  567, 1161, 1262, 1599, 2279, 2631,
         175,  596,  644, 1914,  306,  660,  910, 1623, 1780, 2045,  286,  588,
         698,  911, 1051, 2040, 2119, 2120, 2121, 2454, 1582, 2624, 2701,  659,
        1803, 1234, 1702, 1703, 2238,  633, 1862, 2582,  239,  543,  619,  771,
        1156, 1293, 1628, 2021, 2418, 2419,  580,  609,  615, 1067, 1287, 1358,
        1627, 1725, 2651,  208,  723, 2614, 1602, 2056,  484,  608, 1775, 1790,
         457,  710, 1392, 2213, 2214, 2215, 1349, 1522, 1532, 1634, 1965, 2357,
         334,  456,  693,  734,  736,  861, 1303, 1535, 1580, 1838, 2054, 2074,
        2181, 2182, 2183, 2197, 2199, 2200, 2201, 1701, 1810,  697,  738, 1416,
        2162, 2343,  544,  586, 1042, 1118, 1517, 2052, 2155,  583, 2222, 2223,
        2224, 2225,  284, 2226, 1939, 1146, 1505, 1552, 1640, 1781, 2094, 2106,
        2107, 1209, 1737, 2616, 1251, 1448, 1561, 1871, 1878, 2256,  970, 1632,
        2444, 2642, 1337, 2092, 1805, 1772, 1624,  318, 2093, 1787, 1045,  289,
         563, 1346, 1789,  426, 1779, 1661,  153, 1785, 1998, 1769, 2329, 2504,
         598,  714, 1031, 1662, 1666, 2041, 2205, 2206, 2471, 1721, 2476, 1219,
        1329, 1418,  606, 2360, 2578, 1065, 2487, 2488,  973, 1190, 2427,  236,
        1776,  441,  701, 2184, 1080, 1309, 2312, 1560, 1786, 2082, 2145,  255,
         388,  446,  454,  554,  581,  842, 1029, 1343, 1507, 1538, 1616, 1690,
        1851, 2010, 2030, 2112, 2165, 2166, 2461, 1043, 2310,  610, 2288, 2506,
         429, 1336, 2034, 2295, 1527,  379,  646, 1537, 1549, 1901, 1959,  540,
         747, 1884, 1594,  257, 1117, 2049,  898, 1836,  412,  447, 1849,  831,
        2544, 1647, 2157, 2209,  195,  675,  733,  934, 1649, 1966, 2263, 2355,
        2490,  834, 2169,  927, 1315, 1316, 2140,  332, 1454, 1986,  399,  452,
        1670, 1777, 1784, 2015, 1174,  841, 1713, 2013, 1677, 1494,  498, 1732,
        2014,  162, 1658, 2011, 2012,  300, 1908,  696, 2394, 1288, 1741,  415,
        2178,  279,  518, 1850, 1973, 1687,  652,  654, 1076, 1501,  401,  864,
        2210, 2159, 1367, 1622, 2478, 2217,  373,  507,  866, 1364,  155,  156,
         817, 1521,  483,  514,  816, 1842, 2405, 1072, 2269, 2374, 2375,  258,
         884, 1087, 1094, 1157, 1401, 1530, 1585, 1653, 2463,  158, 2075, 2077,
        2668, 2164, 1103,  210,  323,  651,  787,  815, 1079, 1983, 2020,  604,
        1013, 1351, 1920, 1926, 2189, 1138,  152,  963, 2399, 2400, 2645, 1629,
        1659, 2546,  895, 1296, 1913, 1551, 2079, 1016, 1256, 1761, 2175, 2176,
         661, 1353,  282, 2628,  406,  269,  281, 1996,  449,  558,  797,  876,
        1035, 1136, 1189, 1214, 1723, 1745, 1751,  259, 2537,  603, 2097,  391,
         163, 1579, 1372,  476, 2545, 1520, 2581,  862,  863, 1160, 1715, 1982,
        2017,  458, 2363,  487, 2080,  206, 2691,  479,  904, 1022, 1589, 1301,
        1344, 2317,  767, 1139, 1467, 2053, 2172,  485, 1739, 2303, 2667,  758,
        1169, 1762, 2492, 2643, 1655, 1839, 1604, 2366, 1001, 1318, 2661, 2662,
         541,  971, 1113, 1650,  201, 1636, 2139, 2141, 2018,  589,  802,  980,
        1158, 1910, 2251, 2252, 1322, 1441,  550,  950, 1495, 2151])
num_output  140
self.output_nids  140
output nodes length match
global output equals  True
partition total batch output list spend :  0.022182941436767578
self.buckets_partition() spend  sec:  0.017050981521606445
bucketing dataloader: layer  0
bucketing dataloader: the number of batches:  4
bucketing dataloader: global_batched_output_nid_list  [tensor([110,  26,  22,  65,  59,  84, 109,  61,  18,  17,   2,  88, 124, 120,
         20,  89,  14,   4, 132,  52]), tensor([ 91, 135,  44,   0,  99, 103,  51,  39,  30,  75,  64,  78,  85,  37,
        138, 114,  60, 119, 113,  80, 108,   1,  40,  87,  69,  43,   5,  35,
        126,  67,   8,  68, 130,  71, 101,  53,  45, 111,  24,  76, 121]), tensor([128,  15, 123,  81,  66,  41,  33,   7,  57,  74,  19,  16, 137,  48,
        105,  27, 115,  34, 118, 106,  86,  31,  56, 136,   3, 133,  32,  28,
        104,  23,  96,   6,  90,  98, 127, 134,  38,  58, 112,  25,  62,  12,
        107,  63, 122,  50,  93]), tensor([139,  77,   9, 100,  95,  13,  36, 102, 129,  70,  21,  92,  94, 131,
        116,  49,  72,  55,  82,  29,  97,  73, 117,  79,  47,  42,  10,  83,
        125,  54,  11,  46])]
check_connections_block*********************************
connection check : local_output_nid  20
connection check : local_output_nid  41
connection check : local_output_nid  47
connection check : local_output_nid  32

block_gen_time in "generate_blocks_for_one_layer_block"  0.006540060043334961

----------------------------------------
bucketing dataloader: layer  1
bucketing dataloader: num of batch  4
check_connections_block*********************************
connection check : local_output_nid  171
connection check : local_output_nid  198
connection check : local_output_nid  200
connection check : local_output_nid  158

block_gen_time in "generate_blocks_for_one_layer_block"  0.008841991424560547

block collection to dataloader spend  6.9141387939453125e-06
step  0
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.2718329429626465  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35230064392089844  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.352294921875  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

step  1
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.272031307220459  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35516977310180664  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35517168045043945  GigaBytes
Max Memory Allocated: 0.47321462631225586  GigaBytes

step  2
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.2720065116882324  GigaBytes
Max Memory Allocated: 0.4734067916870117  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35414743423461914  GigaBytes
Max Memory Allocated: 0.4734067916870117  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.35414934158325195  GigaBytes
Max Memory Allocated: 0.4734067916870117  GigaBytes

step  3
----------------------------------------before batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.2718472480773926  GigaBytes
Max Memory Allocated: 0.4734067916870117  GigaBytes

----------------------------------------after batch_pred = model(blocks, batch_inputs)
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.3395042419433594  GigaBytes
Max Memory Allocated: 0.4734067916870117  GigaBytes

----------------------------------------after loss function
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.339505672454834  GigaBytes
Max Memory Allocated: 0.4734067916870117  GigaBytes

----------------------------------------after optimizer
 Nvidia-smi: 2.046875 GB
    Memory Allocated: 0.27185964584350586  GigaBytes
Max Memory Allocated: 0.4734067916870117  GigaBytes

----------------------------------------------------------pseudo_mini_loss sum 1.830542802810669
pure train time :  0.267425537109375
train time :  0.3236558437347412
end to end time :  0.37139177322387695
connection check time:  0.008459806442260742
block generation time  0.015382051467895508
end to end time  0.392838716506958
Total (block generation + training)time/epoch 0.392838716506958
pure train time per /epoch  [0.6149160861968994, 0.27982068061828613, 0.2832674980163574, 0.24986577033996582, 0.267425537109375]
pure train time average  0.2586456537246704
input num list  [2158, 2167, 2175, 2156, 2142]
